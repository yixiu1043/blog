(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{429:function(t,a,s){"use strict";s.r(a);var n=s(3),v=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"操作系统"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#操作系统"}},[t._v("#")]),t._v(" 操作系统")]),t._v(" "),a("h2",{attrs:{id:"第一章"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第一章"}},[t._v("#")]),t._v(" 第一章")]),t._v(" "),a("h3",{attrs:{id:"操作系统的概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#操作系统的概念"}},[t._v("#")]),t._v(" 操作系统的概念")]),t._v(" "),a("p",[t._v("用户")]),t._v(" "),a("p",[t._v("↓")]),t._v(" "),a("p",[t._v("应用程序")]),t._v(" "),a("p",[t._v("↓")]),t._v(" "),a("p",[t._v("操组系统")]),t._v(" "),a("p",[t._v("↓")]),t._v(" "),a("p",[t._v("裸机（纯硬件）")]),t._v(" "),a("ol",[a("li",[t._v("负责管理协调硬件、软件等计算机资源的工作")]),t._v(" "),a("li",[t._v("为上层的应用程序、用户提供简单易用的服务")]),t._v(" "),a("li",[t._v("操作系统时系统软件，而不是硬件")])]),t._v(" "),a("h4",{attrs:{id:"操作系统的定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#操作系统的定义"}},[t._v("#")]),t._v(" 操作系统的定义")]),t._v(" "),a("p",[t._v("操作系统是指控制和管理整个计算机系统的硬件和软件资源，并合理的组织调度计算机的工作和资源的分配，以提供给用户和其他软件方便的接口和环境，它是计算机系统中最基本的系统软件。")]),t._v(" "),a("h4",{attrs:{id:"操作系统的功能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#操作系统的功能"}},[t._v("#")]),t._v(" 操作系统的功能")]),t._v(" "),a("h5",{attrs:{id:"作为系统资源的管理者"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作为系统资源的管理者"}},[t._v("#")]),t._v(" 作为系统资源的管理者")]),t._v(" "),a("p",[t._v("功能：")]),t._v(" "),a("ul",[a("li",[t._v("处理机管理")]),t._v(" "),a("li",[t._v("存储器管理")]),t._v(" "),a("li",[t._v("文件管理")]),t._v(" "),a("li",[t._v("设备管理")])]),t._v(" "),a("p",[t._v("目标：安全、高效")]),t._v(" "),a("h5",{attrs:{id:"作为用户和计算机硬件之间的接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作为用户和计算机硬件之间的接口"}},[t._v("#")]),t._v(" 作为用户和计算机硬件之间的接口")]),t._v(" "),a("p",[t._v("功能：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("命令接口")]),t._v(" "),a("p",[t._v("允许用户直接使用")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("联机命令接口")]),t._v(" "),a("p",[t._v("用户说一句，系统做一句")])]),t._v(" "),a("li",[a("p",[t._v("脱机命令接口")]),t._v(" "),a("p",[t._v("用户说一堆，系统做一堆")])])])]),t._v(" "),a("li",[a("p",[t._v("程序接口")]),t._v(" "),a("p",[t._v("允许用户通过程序间接使用")]),t._v(" "),a("p",[t._v("由一组系统调用组成，程序接口 = 系统调用")])]),t._v(" "),a("li",[a("p",[t._v("GUI（图形用户界面）")]),t._v(" "),a("p",[t._v("用户可以使用形象的图形界面进行操作，而不需要记忆复杂的命令、参数")])])]),t._v(" "),a("p",[t._v("目标：方便用户使用")]),t._v(" "),a("p",[t._v("易懵概念：")]),t._v(" "),a("p",[t._v("系统调用 = 系统调用命令 = 广义指令")]),t._v(" "),a("h5",{attrs:{id:"作为最接近硬件的层次"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作为最接近硬件的层次"}},[t._v("#")]),t._v(" 作为最接近硬件的层次")]),t._v(" "),a("p",[t._v("需要提供的功能和目标：实现对硬件机器的拓展")]),t._v(" "),a("p",[t._v("没有任何软件支持的计算机称为裸机")]),t._v(" "),a("p",[t._v("通常把覆盖了软件的机器称为扩充机器，又称为虚拟机")]),t._v(" "),a("h3",{attrs:{id:"操作系统的特征"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#操作系统的特征"}},[t._v("#")]),t._v(" 操作系统的特征")]),t._v(" "),a("h4",{attrs:{id:"并发"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#并发"}},[t._v("#")]),t._v(" 并发")]),t._v(" "),a("p",[t._v("指两个或多个事件在同一时间间隔内发生，这些事件宏观上是同时发生的，但微观上是交替发生的，操作系统的并发性指计算机系统中同时存在着多个运行着的程序。")]),t._v(" "),a("p",[t._v("一个单核处理机（CPU）同一时刻只能执行一个程序，因此操作系统会负责协调多个程序交替执行（这些程序微观上是交替执行的，但宏观上看起来就像在同时执行）。")]),t._v(" "),a("p",[t._v("事实上，操作系统就是伴随着“多道程序技术”而出现的。因此，操作系统和程序并发是一起诞生的。")]),t._v(" "),a("h4",{attrs:{id:"共享"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#共享"}},[t._v("#")]),t._v(" 共享")]),t._v(" "),a("p",[t._v("共享即资源共享，是指系统中的资源可供内存中多个并发执行的进程共同使用。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("互斥共享")]),t._v(" "),a("p",[t._v("系统中的某些资源，虽然可以提供给多个进程使用，但一个时间段内只允许一个进程访问该资源。")])]),t._v(" "),a("li",[a("p",[t._v("同时共享方式")]),t._v(" "),a("p",[t._v("系统中的某些资源，允许一个时间段内由多个进程“同时”对它们进行访问。")])])]),t._v(" "),a("p",[t._v("所谓“同时”往往上宏观上的，而在微观上，这些进程可能是交替的对该资源进行访问的（即分时共享）。")]),t._v(" "),a("h4",{attrs:{id:"并发和共享的关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#并发和共享的关系"}},[t._v("#")]),t._v(" 并发和共享的关系")]),t._v(" "),a("p",[t._v("并发性是指计算机系统中同时存在着多个运行着的程序。")]),t._v(" "),a("p",[t._v("共享性是指系统中的资源可供内存中多个并发执行的进程同时使用。")]),t._v(" "),a("p",[t._v("如果失去并发性，则系统中只有一个程序正在运行，则共享性失去存在的意义。")]),t._v(" "),a("p",[t._v("如果失去共享性，则QQ和微信不能同时访问硬盘资源，就无法实现同时发送文件，也就无法并发。")]),t._v(" "),a("p",[t._v("并发性和共享性护卫存在条件")]),t._v(" "),a("h4",{attrs:{id:"虚拟"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#虚拟"}},[t._v("#")]),t._v(" 虚拟")]),t._v(" "),a("p",[t._v("虚拟是指把一个物理上的实体变为若干个逻辑上的对应物。物理实体（前者）是实际存在的，而逻辑上对应物（后者）是用户感受到的。")]),t._v(" "),a("ul",[a("li",[t._v("空分复用技术（如虚拟存储器技术）")]),t._v(" "),a("li",[t._v("时分复用技术（如虚拟处理器）")])]),t._v(" "),a("p",[t._v("显然，如果失去了并发性，则一个时间段内系统中只需运行一道程序，那么就失去了实现虚拟性的意义了。因此，没有并发性，就谈不上虚拟性。")]),t._v(" "),a("h4",{attrs:{id:"异步"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异步"}},[t._v("#")]),t._v(" 异步")]),t._v(" "),a("p",[t._v("异步是指，在多道程序环境下，允许多个程序并发执行，但由于资源有限，进程的执行不是一贯到底的，而是走走停停，以不可预知的速度向前推进，这就是进程的异步性。")]),t._v(" "),a("h3",{attrs:{id:"操作系统的发展与分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#操作系统的发展与分类"}},[t._v("#")]),t._v(" 操作系统的发展与分类")]),t._v(" "),a("h4",{attrs:{id:"手工操作阶段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#手工操作阶段"}},[t._v("#")]),t._v(" 手工操作阶段")]),t._v(" "),a("p",[t._v("利用纸带打孔技术")]),t._v(" "),a("p",[t._v("主要缺点：用户独占全机、人机速度矛盾导致资源利用率极低。")]),t._v(" "),a("h4",{attrs:{id:"单道批处理系统"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单道批处理系统"}},[t._v("#")]),t._v(" 单道批处理系统")]),t._v(" "),a("p",[t._v("引入脱机输入/输出技术（用磁带完成），并监督程序负责控制作业的输入、输出")]),t._v(" "),a("p",[t._v("优点：缓解了一定程度的人机速度矛盾，资源利用率有所提升。")]),t._v(" "),a("p",[t._v("缺点：内存中仅能有一道程序运行，只有该程序运行结束之后才能调入下一道程序。CPU有大量的时间是在空闲等待I/O完成。资源利用率依然很低。")]),t._v(" "),a("h4",{attrs:{id:"多道批处理系统"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多道批处理系统"}},[t._v("#")]),t._v(" 多道批处理系统")]),t._v(" "),a("p",[t._v("每次往内存中输入多道程序，由操作系统负责管理这些程序的运行，各个程序并发执行。")]),t._v(" "),a("p",[t._v("优点：多道程序并发执行，共享计算机资源。资源利用率大幅提升，CPU和其他资源保持“忙碌”状态，系统吞吐量增大。")]),t._v(" "),a("p",[t._v("缺点：用户响应时间长，没有人机交互功能（用户提交自己的作业之后就只能等待计算机处理完成，中间不能控制自己的作业执行）")]),t._v(" "),a("h4",{attrs:{id:"分时操作系统"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分时操作系统"}},[t._v("#")]),t._v(" 分时操作系统")]),t._v(" "),a("p",[t._v("计算机以时间片为单位轮流为各个用户/作业服务，各个用户可通过终端与计算机进行交互。")]),t._v(" "),a("p",[t._v("优点：用户请求可以被即时响应，解决了人机交互问题，允许多个用户同时使用一台计算机，并且用户对计算机的操作相互独立，感受不到别人的存在。")]),t._v(" "),a("p",[t._v("缺点：不能优先处理一些紧急任务。操作系统对各个用户/作业都是完全公平的，循环的为每个用户/作业服务一个时间片，不区分任务的紧急性。")]),t._v(" "),a("h4",{attrs:{id:"实时操作系统"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实时操作系统"}},[t._v("#")]),t._v(" 实时操作系统")]),t._v(" "),a("p",[t._v("在实时操作系统的控制下，计算机系统接收到外部信号后及时进行处理，并且要在严格的时限内处理完事件。实时操作系统的主要特点是及时性和可靠性。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("硬实时操作系统")]),t._v(" "),a("p",[t._v("必须在绝对严格的规定时间内完成处理")])]),t._v(" "),a("li",[a("p",[t._v("软实时操作系统")]),t._v(" "),a("p",[t._v("能接受偶尔违反时间规定")])])]),t._v(" "),a("p",[t._v("优点：能够优先响应一些紧急任务，某些紧急任务不需时间片排队。")]),t._v(" "),a("h4",{attrs:{id:"其他几种操作系统"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他几种操作系统"}},[t._v("#")]),t._v(" 其他几种操作系统")]),t._v(" "),a("p",[t._v("网络操作系统：是伴随计算机网络的发展而诞生的，能把网络中各个计算机有机的结合起来，实现数据传送等功能，实现网络中各种资源的共享（如文件夹）和各个计算机之间的通信。（如：Windows NT就是一种典型的网络操作系统，网站服务器就可以使用）")]),t._v(" "),a("p",[t._v("分布式操作系统：主要特点是分布性和并行性。系统中各台计算机地位相同，任何工作都可以分布在这些计算机上，由它们并行、协同完成这个任务。")]),t._v(" "),a("p",[t._v("个人计算机操作系统：如Windows XP、MacOS，方便个人使用。")]),t._v(" "),a("h3",{attrs:{id:"操作系统的运行机制和体系结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#操作系统的运行机制和体系结构"}},[t._v("#")]),t._v(" 操作系统的运行机制和体系结构")]),t._v(" "),a("h4",{attrs:{id:"什么是指令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是指令"}},[t._v("#")]),t._v(" 什么是指令")]),t._v(" "),a("p",[t._v("一条高级语言的代码翻译过来可能会对应多条指令。")]),t._v(" "),a("p",[t._v("简单来说，“指令”就是处理器（CPU）能识别、执行的最基本命令，比如说：加法指令就是让CPU进行加法运算。")]),t._v(" "),a("h4",{attrs:{id:"两种指令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#两种指令"}},[t._v("#")]),t._v(" 两种指令")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("特权指令")]),t._v(" "),a("p",[t._v("内存清零指令，不允许用户程序使用")])]),t._v(" "),a("li",[a("p",[t._v("非特权指令")]),t._v(" "),a("p",[t._v("如普通的运算指令")])])]),t._v(" "),a("h4",{attrs:{id:"两种状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#两种状态"}},[t._v("#")]),t._v(" 两种状态")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("用户态（目态）")]),t._v(" "),a("p",[t._v("此时CPU只能执行非特权指令")])]),t._v(" "),a("li",[a("p",[t._v("核心态（管态）")]),t._v(" "),a("p",[t._v("特权指令、非特权指令都可以执行")])])]),t._v(" "),a("p",[t._v("用程序状态寄存器（PSW）中的某标志位来标识当前处理器处于什么状态，如0位用户态，1为核心态。")]),t._v(" "),a("h4",{attrs:{id:"两种程序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#两种程序"}},[t._v("#")]),t._v(" 两种程序")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("内核程序")]),t._v(" "),a("p",[t._v("操作系统的内核程序是系统的管理者，既可以执行特权指令，也可以执行非特权指令，运行在核心态。")])]),t._v(" "),a("li",[a("p",[t._v("应用程序")]),t._v(" "),a("p",[t._v("为了保证系统能安全运行，普通应用程序只能执行非特权指令，运行在用户态。")])])]),t._v(" "),a("h4",{attrs:{id:"操作系统的内核"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#操作系统的内核"}},[t._v("#")]),t._v(" 操作系统的内核")]),t._v(" "),a("p",[t._v("内核是计算机配置的底层软件，是操作系统最基本、最核心的部分。")]),t._v(" "),a("p",[t._v("实现操作系统内核功能的那些程序就是内核程序。")]),t._v(" "),a("h5",{attrs:{id:"内核程序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内核程序"}},[t._v("#")]),t._v(" 内核程序")]),t._v(" "),a("ul",[a("li",[t._v("时间管理")]),t._v(" "),a("li",[t._v("中断处理")]),t._v(" "),a("li",[t._v("原语")]),t._v(" "),a("li",[t._v("资源管理\n"),a("ul",[a("li",[t._v("进程管理")]),t._v(" "),a("li",[t._v("存储器管理")]),t._v(" "),a("li",[t._v("设备管理")])])])]),t._v(" "),a("h5",{attrs:{id:"体系结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#体系结构"}},[t._v("#")]),t._v(" 体系结构")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("大内核")]),t._v(" "),a("p",[t._v("将操作系统的主要功能模块都作为系统内核，运行在核心态")]),t._v(" "),a("p",[t._v("优点：高性能")]),t._v(" "),a("p",[t._v("缺点：内核代码庞大，结构混乱，难以维护")])]),t._v(" "),a("li",[a("p",[t._v("微内核")]),t._v(" "),a("p",[t._v("只把最基本的功能保留在内核")]),t._v(" "),a("p",[t._v("优点：内核功能少，结构清晰，方便维护")]),t._v(" "),a("p",[t._v("缺点：需要频繁的在核心态和用户态之间切换，性能低")])])]),t._v(" "),a("h3",{attrs:{id:"中断和异常"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#中断和异常"}},[t._v("#")]),t._v(" 中断和异常")]),t._v(" "),a("h4",{attrs:{id:"中断的概念和作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#中断的概念和作用"}},[t._v("#")]),t._v(" 中断的概念和作用")]),t._v(" "),a("ol",[a("li",[t._v("当中断发生时，CPU立即进入核心态")]),t._v(" "),a("li",[t._v("当中断发生后，当前运行的进程暂停运行，并由操作系统内核对中断进行处理")]),t._v(" "),a("li",[t._v("对于不同的中断信号，会进行不同的处理")])]),t._v(" "),a("p",[t._v("发生了中断，意味着需要操作系统介入，开展管理工作。由于操作系统的管理工作（比如进程切换、分配I/O设备等）需要使用特权指令，因此CPU要从用户态转换为核心态。中断可以使CPU从用户态切换为核心态，使操作系统获得计算机控制权。有了中断，才能实现多道程序并发执行。")]),t._v(" "),a("h4",{attrs:{id:"中断的分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#中断的分类"}},[t._v("#")]),t._v(" 中断的分类")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("内中断")]),t._v(" "),a("p",[t._v("也称异常、例外、陷入，信号的来源自CPU内部，与当前执行的指令有关")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("自愿中断")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("指令中断")]),t._v(" "),a("p",[t._v("有意为之的异常，如系统调用时使用的访管指令（又叫陷入指令、trap指令）")])])])]),t._v(" "),a("li",[a("p",[t._v("强迫中断")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("硬件故障")]),t._v(" "),a("p",[t._v("由错误条件引起的，可能被故障处理程序修复，如缺页")])]),t._v(" "),a("li",[a("p",[t._v("软件中断")]),t._v(" "),a("p",[t._v("不可恢复的致命错误造成的结果，终止处理程序不再将控制返回给引发终止的应用程序，如整数除0")])])])])])]),t._v(" "),a("li",[a("p",[t._v("外中断")]),t._v(" "),a("p",[t._v("信号来源自CPU外部与当前执行的指令无关，狭义的中断")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("外设请求")]),t._v(" "),a("p",[t._v("如I/O操作完成发出的中断信号")])]),t._v(" "),a("li",[a("p",[t._v("人工干预")]),t._v(" "),a("p",[t._v("用户强行终止一个进程")])])])])]),t._v(" "),a("h4",{attrs:{id:"中断的处理过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#中断的处理过程"}},[t._v("#")]),t._v(" 中断的处理过程")]),t._v(" "),a("p",[t._v("Step1：执行完每个指令之后，CPU都要检查当前是否有外部中断信号")]),t._v(" "),a("p",[t._v("Step2：如果检测到外部中断信号，则需要保护被中断进程的CPU环境（如程序状态字PSW、程序计数器PC、各种通用寄存器）")]),t._v(" "),a("p",[t._v("Step3：根据中断信号类型转入响应的中断处理程序")]),t._v(" "),a("p",[t._v("Step4：恢复原进程的CPU环境并退出中断，返回原进程继续往下执行")]),t._v(" "),a("h3",{attrs:{id:"系统调用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#系统调用"}},[t._v("#")]),t._v(" 系统调用")]),t._v(" "),a("h4",{attrs:{id:"什么是系统调用-有何作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是系统调用-有何作用"}},[t._v("#")]),t._v(" 什么是系统调用，有何作用？")]),t._v(" "),a("p",[t._v("应用程序通过系统调用请求操作系统的服务。系统中的各种共享资源都由操作系统统一掌管，因此在用户程序中，凡是与资源有关的操作（如存储分配、I/O操作、文件管理等），都必须通过系统调用方式向操作系统提出服务请求，由操作系统代为完成。这样可以保证系统的稳定性和安全性，防止用户进行非法操组。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("设备管理")]),t._v(" "),a("p",[t._v("完成设备的请求/释放/启动等功能")])]),t._v(" "),a("li",[a("p",[t._v("文件管理")]),t._v(" "),a("p",[t._v("完成文件的读/写/创建/删除等功能")])]),t._v(" "),a("li",[a("p",[t._v("进程控制")]),t._v(" "),a("p",[t._v("完成进程的创建/撤销/阻塞/唤醒等功能")])]),t._v(" "),a("li",[a("p",[t._v("进程通信")]),t._v(" "),a("p",[t._v("完成进程之间的消息传递/信号传递等功能")])]),t._v(" "),a("li",[a("p",[t._v("内存管理")]),t._v(" "),a("p",[t._v("完成内存的分配/回收等功能")])])]),t._v(" "),a("p",[t._v("系统调用相关处理涉及到对系统资源的管理、对进程的控制，这些功能需要执行一些特权指令才能完成，因此系统调用的相关处理需要在核心态下进行。")]),t._v(" "),a("h4",{attrs:{id:"系统调用与库函数的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#系统调用与库函数的区别"}},[t._v("#")]),t._v(" 系统调用与库函数的区别")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("普通应用程序")]),t._v(" "),a("th",[t._v("可直接进行系统调用，也可以使用库函数。有的库函数涉及系统调用，有的不涉及。")]),t._v(" "),a("th")])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("编程语言")]),t._v(" "),a("td",[t._v("向上提供库函数。有时会将系统调用封装成库函数，以隐藏系统调用的一些细节，使上层进行系统调用更加方便")]),t._v(" "),a("td",[t._v("↑")])]),t._v(" "),a("tr",[a("td",[t._v("操组系统")]),t._v(" "),a("td",[t._v("向上提供系统调用")]),t._v(" "),a("td",[t._v("↑")])]),t._v(" "),a("tr",[a("td",[t._v("裸机")]),t._v(" "),a("td"),t._v(" "),a("td",[t._v("↑")])])])]),t._v(" "),a("h4",{attrs:{id:"系统调用背后的过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#系统调用背后的过程"}},[t._v("#")]),t._v(" 系统调用背后的过程")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("高级语言代码")]),t._v(" "),a("th",[t._v("编译")]),t._v(" "),a("th",[t._v("汇编语言指令")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("代码1")]),t._v(" "),a("td"),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("代码2")]),t._v(" "),a("td"),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v('调用库函数write("abc")，该库函数内部封装了系统调用的复杂细节')]),t._v(" "),a("td",[t._v("→")]),t._v(" "),a("td",[t._v("1. 前期处理相关指令"),a("br"),t._v("2. movl指令（将“abc”作为系统调用参数放到某个通用寄存器中）"),a("br"),t._v("3.int x指令（trap/陷入/访管指令）"),a("br"),t._v("4. 后续处理相关指令")])]),t._v(" "),a("tr",[a("td"),t._v(" "),a("td"),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("代码4")]),t._v(" "),a("td"),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("指令5")]),t._v(" "),a("td"),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("...")]),t._v(" "),a("td"),t._v(" "),a("td")])])]),t._v(" "),a("ol",[a("li",[t._v("传递系统调用参数")]),t._v(" "),a("li",[t._v("执行陷入指令（用户态）")]),t._v(" "),a("li",[t._v("执行系统调用相应服务程序（核心态）")]),t._v(" "),a("li",[t._v("返回用户程序")])]),t._v(" "),a("p",[t._v("注意：")]),t._v(" "),a("ol",[a("li",[t._v("陷入指令是在用户态执行的，执行陷入指令之后立即引发一个内中断，从而CPU进入核心态")]),t._v(" "),a("li",[t._v("发出系统调用请求是在用户态，而对系统调用的相应处理在核心态下进行")]),t._v(" "),a("li",[t._v("陷入指令是唯一一个只能在用户态执行，而不可在核心态执行的指令")])]),t._v(" "),a("h2",{attrs:{id:"第二章"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第二章"}},[t._v("#")]),t._v(" 第二章")]),t._v(" "),a("h3",{attrs:{id:"进程的定义、组成、组织方式、特征"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程的定义、组成、组织方式、特征"}},[t._v("#")]),t._v(" 进程的定义、组成、组织方式、特征")]),t._v(" "),a("h4",{attrs:{id:"进程的定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程的定义"}},[t._v("#")]),t._v(" 进程的定义")]),t._v(" "),a("ul",[a("li",[t._v("PCB")]),t._v(" "),a("li",[t._v("程序段")]),t._v(" "),a("li",[t._v("数据段")])]),t._v(" "),a("p",[t._v("程序段、数据段、PCB三部分组成了进程实体（进程映像）。一般情况下，我们把进程实体就简称为进程，所谓创建进程，实质上是创建进程实体中的PCB；而撤销进程，实质上是撤销进程实体中的PCB，PCB是进程存在的唯一标志。")]),t._v(" "),a("h4",{attrs:{id:"进程的组成"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程的组成"}},[t._v("#")]),t._v(" 进程的组成")]),t._v(" "),a("p",[t._v("进程（进程实体）由程序段、数据段、PCB三部分组成。")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("PCB")]),t._v(" "),a("p",[t._v("操作系统通过PCB来管理进程，因此PCB中应该包含操作系统对其进行管理所需的各种信息。")])]),t._v(" "),a("li",[a("p",[t._v("程序段")]),t._v(" "),a("p",[t._v("程序代码即存放在此")])]),t._v(" "),a("li",[a("p",[t._v("数据段")]),t._v(" "),a("p",[t._v("程序运行时使用、产生的运算数据。如全局变量、局部变量、宏定义的常量就存放在数据段内")])])]),t._v(" "),a("ul",[a("li",[t._v("PCB\n"),a("ul",[a("li",[t._v("进程描述信息")]),t._v(" "),a("li",[t._v("进程控制和管理信息")]),t._v(" "),a("li",[t._v("资源分配清单")]),t._v(" "),a("li",[t._v("处理机相关信息")])])]),t._v(" "),a("li",[t._v("程序段\n"),a("ul",[a("li",[t._v("存放要执行的代码")])])]),t._v(" "),a("li",[t._v("数据段\n"),a("ul",[a("li",[t._v("存放程序运行过程中处理的各种数据")])])])]),t._v(" "),a("p",[t._v("进程的管理者（操组系统）所需的数据都在PCB中，而程序本身运行所需的数据在数据段和程序段中。")]),t._v(" "),a("h4",{attrs:{id:"进程的组织"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程的组织"}},[t._v("#")]),t._v(" 进程的组织")]),t._v(" "),a("p",[t._v("在一个系统中，通常有数十、数百乃至数千个PCB。为了能对他们加以有效的管理，应该用适当的方式把这些PCB组织起来。")]),t._v(" "),a("ul",[a("li",[t._v("链接方式\n"),a("ul",[a("li",[t._v("按照进程状态将PCB分为多个队列")]),t._v(" "),a("li",[t._v("操作系统持有指向各个队列的指针")])])]),t._v(" "),a("li",[t._v("索引方式\n"),a("ul",[a("li",[t._v("根据进程状态的不同，建立几张索引表")]),t._v(" "),a("li",[t._v("操作系统持有指向各个索引表的指针")])])])]),t._v(" "),a("h5",{attrs:{id:"链接方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链接方式"}},[t._v("#")]),t._v(" 链接方式")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("执行指针")]),t._v(" "),a("p",[t._v("指向当前处于运行态（执行态）的进程")]),t._v(" "),a("p",[t._v("单CPU计算机中，同一时刻只会有一个进程处于运行态")])]),t._v(" "),a("li",[a("p",[t._v("就绪队列指针")]),t._v(" "),a("p",[t._v("指向当前处于就绪态的进程")]),t._v(" "),a("p",[t._v("通常会把优先级高的进程放在队头")])]),t._v(" "),a("li",[a("p",[t._v("阻塞队列指针")]),t._v(" "),a("p",[t._v("指向当前处于阻塞态的进程，很多操作系统还会根据阻塞原因不同，再分为多个阻塞队列")])])]),t._v(" "),a("h5",{attrs:{id:"索引方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引方式"}},[t._v("#")]),t._v(" 索引方式")]),t._v(" "),a("ol",[a("li",[t._v("执行指针")]),t._v(" "),a("li",[t._v("就绪表指针")])]),t._v(" "),a("p",[t._v("​\t\t指向就绪索引表")]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[a("p",[t._v("阻塞表指针")]),t._v(" "),a("p",[t._v("指向阻塞索引表")])])]),t._v(" "),a("h4",{attrs:{id:"进程的特征"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程的特征"}},[t._v("#")]),t._v(" 进程的特征")]),t._v(" "),a("p",[t._v("进程和程序是两个截然不同的概念，相比于程序，进程拥有以下特征")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("动态性")]),t._v(" "),a("p",[t._v("进程是程序的一次执行过程，是动态的产生、变化和消亡的")])]),t._v(" "),a("li",[a("p",[t._v("并发性")]),t._v(" "),a("p",[t._v("内存中有多个进程实体，各进程可并发执行")])]),t._v(" "),a("li",[a("p",[t._v("独立性")]),t._v(" "),a("p",[t._v("进程是能独立运行、独立获得资源、独立接受调度的基本单位")])]),t._v(" "),a("li",[a("p",[t._v("异步性")]),t._v(" "),a("p",[t._v("各进程按各自独立的、不可预知的速度向前推进，操组系统要求提供“进程同步机制”来解决异步问题")])]),t._v(" "),a("li",[a("p",[t._v("结构性")]),t._v(" "),a("p",[t._v("每个进程都会配置一个PCB。结构上看，进程由程序段、数据段、PCB组成")])])]),t._v(" "),a("h3",{attrs:{id:"进程的状态与转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程的状态与转换"}},[t._v("#")]),t._v(" 进程的状态与转换")]),t._v(" "),a("p",[t._v("进程是程序的一次运行。在这个执行过程中，有时进程正在被CPU处理，有时又需要等待CPU服务，可见，进程的状态是会有各种变化。为了方便对各个进程的管理，操作系统需要将进程合理的划分为几种状态。")]),t._v(" "),a("h4",{attrs:{id:"进程的三种基本状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程的三种基本状态"}},[t._v("#")]),t._v(" 进程的三种基本状态")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("运行态（Running）")]),t._v(" "),a("p",[t._v("占有CPU，并在CPU上运行")]),t._v(" "),a("p",[t._v("单核处理机环境下，每一时刻最多只有一个进程处于运行态。（双核环境下可以同时有两个进程处于运行态）")])]),t._v(" "),a("li",[a("p",[t._v("就绪态（Ready）")]),t._v(" "),a("p",[t._v("已经具备运行条件，但由于没有空闲CPU，而暂时不能运行")]),t._v(" "),a("p",[t._v("进程已经拥有了除处理机之外所有需要的资源，一旦获得处理机，即可立刻进入运行态开始运行。即：万事俱备，只欠东风")])]),t._v(" "),a("li",[a("p",[t._v("阻塞态（Waiting/Blocked，又称：等待态）")]),t._v(" "),a("p",[t._v("因为等待某一事件而暂时不能运行")]),t._v(" "),a("p",[t._v("如：等待操作系统分配打印机、等待读磁盘操作的结果。CPU是计算机中最昂贵的部件，为了提高CPU的利用率，需要先将其他进程需要的资源分配到尾，才能得到CPU的服务")])])]),t._v(" "),a("h4",{attrs:{id:"进程的另外两种状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程的另外两种状态"}},[t._v("#")]),t._v(" 进程的另外两种状态")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("创建态")]),t._v(" "),a("p",[t._v("进程正在被创建，操作系统为进程分配资源、初始化PCB")])]),t._v(" "),a("li",[a("p",[t._v("终止态")]),t._v(" "),a("p",[t._v("进程正在从系统撤销、操作系统会回收进程拥有的资源、撤销PCB")])])]),t._v(" "),a("h4",{attrs:{id:"进程状态的转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程状态的转换"}},[t._v("#")]),t._v(" 进程状态的转换")]),t._v(" "),a("p",[t._v("​\t\t\t\t\t\t\t\t \t\t\t\t\t\t处理机 ❌\t\t\t\t\t\t\t\t\t 处理机 ✅")]),t._v(" "),a("p",[t._v("​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t其他  ✅\t    进程被调度\t\t\t其他 ✅")]),t._v(" "),a("p",[t._v("创建态\t\t\t\t \t→ \t\t\t\t\t就绪态 \t\t\t\t ↔ \t\t\t\t\t运行态\t\t\t\t\t →\t \t\t\t\t终止态")]),t._v(" "),a("p",[t._v("​\t\t\t\t\t系统完成创建工\t\t\t\t\t\t\t\t\t 时间片到，\t\t\t\t\t\t进程运行结束，或运行")]),t._v(" "),a("p",[t._v("​\t\t\t\t\t作的一系列工作\t\t\t\t\t\t\t\t或处理机被抢占\t\t\t\t\t过程中遇到不可修复的错误")]),t._v(" "),a("p",[t._v("​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t↑\t\t\t\t\t\t\t\t\t\t\t\t\t\t↓")]),t._v(" "),a("p",[t._v("​\t\t\t\t\t\t\t\t\t\t申请的资源被分配，\t\t\t\t\t\t进程用“系统调用”的方式申请某种")]),t._v(" "),a("p",[t._v("​\t\t\t\t\t\t\t\t\t\t或等待的事件发生\t\t\t\t\t\t系统资源，或者请求等待某个事件发生")]),t._v(" "),a("p",[t._v("​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t阻塞态")]),t._v(" "),a("p",[t._v("​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t处理机 ❌")]),t._v(" "),a("p",[t._v("​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t其他 ❌")]),t._v(" "),a("p",[t._v("阻塞态 → 就绪态是不是进程自身控制的，是一种被动行为。")]),t._v(" "),a("p",[t._v("运行态 → 阻塞态是一种进程自身做出的主动行为。")]),t._v(" "),a("p",[t._v("注意：不能由阻塞态直接转换为运行态，也不能由就绪态直接转为阻塞态（因为进入阻塞态是进程主动请求的，必然需要进程在运行时才能发出这种请求）")]),t._v(" "),a("h3",{attrs:{id:"进程控制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程控制"}},[t._v("#")]),t._v(" 进程控制")]),t._v(" "),a("h4",{attrs:{id:"什么是进程控制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是进程控制"}},[t._v("#")]),t._v(" 什么是进程控制")]),t._v(" "),a("p",[t._v("进程控制的主要功能是对系统中的所有进程实施有效的管理，它具有创建新进程、撤销已有进程、实现进程转换等功能。")]),t._v(" "),a("p",[t._v("简化理解：进程控制就是要实现进程状态转换")]),t._v(" "),a("h4",{attrs:{id:"如何实现进程控制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何实现进程控制"}},[t._v("#")]),t._v(" 如何实现进程控制")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("创建进程")]),t._v(" "),a("p",[t._v("需要初始化PCB、分配系统资源")])]),t._v(" "),a("li",[a("p",[t._v("创建态 →  就绪态")]),t._v(" "),a("p",[t._v("需修改PCB内容和相应队列")])]),t._v(" "),a("li",[a("p",[t._v("就绪态 → 运行态")]),t._v(" "),a("p",[t._v("需要恢复进程运行环境、修改PCB内容和相应队列")])]),t._v(" "),a("li",[a("p",[t._v("运行态 → 阻塞态")]),t._v(" "),a("p",[t._v("需保存进程运行环境、修改PCB内容和相应队列")])]),t._v(" "),a("li",[a("p",[t._v("阻塞态 → 就绪态")]),t._v(" "),a("p",[t._v("需修改PCB内容和相应队列。如果等待的是资源，则还需为进程分配系统资源")])]),t._v(" "),a("li",[a("p",[t._v("运行态 → 终止态")]),t._v(" "),a("p",[t._v("需回收进程拥有的资源，撤销PCB")])]),t._v(" "),a("li",[a("p",[t._v("运行态 → 就绪态")]),t._v(" "),a("p",[t._v("（进程切换）需保存进程运行环境、修改PCB内容和相应队列")])])]),t._v(" "),a("p",[t._v("用原语实现进程控制。原语的特点是执行期间不允许中断，只能一气呵成。")]),t._v(" "),a("p",[t._v("这种不可被中断的操作即原子操作。")]),t._v(" "),a("p",[t._v("原语采用“关中断指令”和“开中断指令”实现。")]),t._v(" "),a("p",[t._v("显然，关/开中断指令的权限非常大，必然是只允许在核心态下执行的特权指令。")]),t._v(" "),a("h4",{attrs:{id:"进程控制相关的原语"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程控制相关的原语"}},[t._v("#")]),t._v(" 进程控制相关的原语")]),t._v(" "),a("p",[t._v("进程控制会导致进程状态的转换。无论哪个原语，要做的无非三类事情：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("更新PCB中的信息")]),t._v(" "),a("p",[t._v("如修改进程转态标志、将运行环境保存到PCB、从PCB恢复运行环境")]),t._v(" "),a("ul",[a("li",[t._v("所有的进程控制原语一定都会修改进程状态标志")]),t._v(" "),a("li",[t._v("剥夺当前运行进程的CPU使用权必然需要保存其运行环境")]),t._v(" "),a("li",[t._v("某进程开始运行前必然要恢复期运行环境")])])]),t._v(" "),a("li",[a("p",[t._v("将PCB插入合适的队列")])]),t._v(" "),a("li",[a("p",[t._v("分配/回收资源")])])]),t._v(" "),a("h5",{attrs:{id:"进程的创建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程的创建"}},[t._v("#")]),t._v(" 进程的创建")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("创建原语")]),t._v(" "),a("p",[t._v("无  → 创建态 → 就绪态")]),t._v(" "),a("ul",[a("li",[t._v("申请空白PCB")]),t._v(" "),a("li",[t._v("为新进程分配所需资源")]),t._v(" "),a("li",[t._v("初始化PCB")]),t._v(" "),a("li",[t._v("将PCB插入就绪队列")])])]),t._v(" "),a("li",[a("p",[t._v("引起进程创建的事件")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("用户登录")]),t._v(" "),a("p",[t._v("分时系统中，用户登录成功，系统会为其建立一个新的进程")])]),t._v(" "),a("li",[a("p",[t._v("作业调度")]),t._v(" "),a("p",[t._v("多道批处理系统中，有新的作业放入内存时，会为其建立一个新的进程")])]),t._v(" "),a("li",[a("p",[t._v("提供服务")]),t._v(" "),a("p",[t._v("用户向操作系统提出某些请求时，会新建一个进程处理该请求")])]),t._v(" "),a("li",[a("p",[t._v("应用请求")]),t._v(" "),a("p",[t._v("由用户进程主动请求创建一个子进程")])])])])]),t._v(" "),a("h5",{attrs:{id:"进程终止"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程终止"}},[t._v("#")]),t._v(" 进程终止")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("撤销原语")]),t._v(" "),a("p",[t._v("就绪态/阻塞态/运行态 → 终止态 → 无")]),t._v(" "),a("ul",[a("li",[t._v("从PCB集合中找到终止进程的PCB")]),t._v(" "),a("li",[t._v("若进程正在运行，立即剥夺CPU，将CPU分配给其他进程")]),t._v(" "),a("li",[t._v("终止其所有子进程")]),t._v(" "),a("li",[t._v("将该进程拥有的所有资源归还给父进程或操作系统")]),t._v(" "),a("li",[t._v("删除PCB")])])]),t._v(" "),a("li",[a("p",[t._v("引起进程终止的事件")]),t._v(" "),a("ul",[a("li",[t._v("正常结束")]),t._v(" "),a("li",[t._v("异常结束")]),t._v(" "),a("li",[t._v("外界干预")])])])]),t._v(" "),a("h5",{attrs:{id:"进程阻塞和唤醒"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程阻塞和唤醒"}},[t._v("#")]),t._v(" 进程阻塞和唤醒")]),t._v(" "),a("p",[t._v("因何事阻塞，就应由何事唤醒，阻塞原语和唤醒原语必须成对使用")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("进程阻塞")]),t._v(" "),a("p",[t._v("运行态 →  阻塞态")]),t._v(" "),a("ul",[a("li",[t._v("阻塞原语\n"),a("ul",[a("li",[t._v("找到阻塞的进程对应的PCB")]),t._v(" "),a("li",[t._v("保护进程运行现场，将PCB状态信息设置为“阻塞态”，暂时停止进程运行")]),t._v(" "),a("li",[t._v("将PCB插入相应事件的等待队列")])])]),t._v(" "),a("li",[t._v("引起进程阻塞的事件\n"),a("ul",[a("li",[t._v("需要等待系统分配某种资源")]),t._v(" "),a("li",[t._v("需要等待相互合作的其他进程完成工作")])])])])]),t._v(" "),a("li",[a("p",[t._v("进程唤醒")]),t._v(" "),a("p",[t._v("阻塞态 →  就绪态")]),t._v(" "),a("ul",[a("li",[t._v("唤醒原语\n"),a("ul",[a("li",[t._v("在事件等待队列中找到PCB")]),t._v(" "),a("li",[t._v("将PCB从等待队列移除，设置进程为就绪状态")]),t._v(" "),a("li",[t._v("将PCB插入就绪队列，等待被调度")])])]),t._v(" "),a("li",[t._v("引起进程唤醒的事件\n"),a("ul",[a("li",[t._v("等待事件发生")])])])])])]),t._v(" "),a("h5",{attrs:{id:"进程切换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程切换"}},[t._v("#")]),t._v(" 进程切换")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("切换原语")]),t._v(" "),a("p",[t._v("运行态 →  阻塞态/就绪态")]),t._v(" "),a("p",[t._v("就绪态 → 运行态")]),t._v(" "),a("ul",[a("li",[t._v("将运行环境信息存入PCB")]),t._v(" "),a("li",[t._v("PCB移入相应队列")]),t._v(" "),a("li",[t._v("选择另一个进程执行，并更新其PCB")]),t._v(" "),a("li",[t._v("根据PCB恢复新进程所需的运行环境")])])]),t._v(" "),a("li",[a("p",[t._v("引起进程切换的事件")]),t._v(" "),a("ul",[a("li",[t._v("当前进程时间片到")]),t._v(" "),a("li",[t._v("有更高优先级的进程到达")]),t._v(" "),a("li",[t._v("当前进程主动阻塞")]),t._v(" "),a("li",[t._v("当前进程终止")])])])]),t._v(" "),a("h3",{attrs:{id:"进程通信"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程通信"}},[t._v("#")]),t._v(" 进程通信")]),t._v(" "),a("h4",{attrs:{id:"什么是进程通信"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是进程通信"}},[t._v("#")]),t._v(" 什么是进程通信")]),t._v(" "),a("p",[t._v("顾名思义，进程通信就是指进程之间的信息交换。")]),t._v(" "),a("p",[t._v("进程分配系统资源的单位（包括内存地址空间），因此各进程拥有的内存地址空间相互独立。")]),t._v(" "),a("p",[t._v("为了保证安全，一个进程不能直接访问另一个进程的地址空间。")]),t._v(" "),a("p",[t._v("但是进程之间的信息交换又是必须实现的。")]),t._v(" "),a("p",[t._v("为了保证进程间的安全通信么，操作系统提供了一些方法。")]),t._v(" "),a("ul",[a("li",[t._v("共享存储")]),t._v(" "),a("li",[t._v("消息传递")]),t._v(" "),a("li",[t._v("管道通信")])]),t._v(" "),a("h4",{attrs:{id:"共享存储"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#共享存储"}},[t._v("#")]),t._v(" 共享存储")]),t._v(" "),a("p",[t._v("两个进程对共享空间的访问必须是互斥的（互斥访问通过操作系统提供的工具实现）。")]),t._v(" "),a("p",[t._v("操作系统只负责提供共享空间和同步互斥工具（如P、V操作）。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("基于数据结构的共享")]),t._v(" "),a("p",[t._v("比如共享空间里只能存放一个长度为10的数组。这种共享方式速度慢、限制多，是一种低级通信方式。")])]),t._v(" "),a("li",[a("p",[t._v("基于存储区的共享")]),t._v(" "),a("p",[t._v("在内存中划出一块共享存储区，数据的形式、存放位置都是由进程控制，而不是操作系统。相比之下，这种共享方式速度更快，是一种高级通信方式。")])])]),t._v(" "),a("h4",{attrs:{id:"管道通信"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#管道通信"}},[t._v("#")]),t._v(" 管道通信")]),t._v(" "),a("p",[t._v("管道是指用于连接读写进程的一个共享文件，又名pipe文件。其实就是在内存中开辟一个固定大小的缓冲区。")]),t._v(" "),a("ol",[a("li",[t._v("两个管道只能采用半双工通信，某一时间段内只能实现单项的传输。如果要实现双向同时通信，则需要设置两个管道。")]),t._v(" "),a("li",[t._v("各进程要互斥的访问管道")]),t._v(" "),a("li",[t._v("数据以字符流的形式写入管道，当管道写满时，写进程的write()系统调用将被阻塞，等待读进程将数据取走。当读进程将全部数据取走后，管道变空，此时读进程的read()系统调用将被阻塞。")]),t._v(" "),a("li",[t._v("如果没写满，就不允许读。如果没读空，就不允许写。")]),t._v(" "),a("li",[t._v("数据一旦被读出，就从管道中被抛弃，这就意味着读进程最多只能有一个，否则可能会有读错数据的情况。")])]),t._v(" "),a("h4",{attrs:{id:"消息传递"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#消息传递"}},[t._v("#")]),t._v(" 消息传递")]),t._v(" "),a("p",[t._v("进程间的数据以格式化的消息（Message）为单位，进程通过操作系统提供的“发送消息/接收消息”两个原语进行数据交换。")]),t._v(" "),a("p",[t._v("Message：消息头 + 消息体")]),t._v(" "),a("p",[t._v("消息头包括：发送进程ID、接收进程ID、消息类型、消息长度等格式化的信息（计算机网络中发送的“报文”其实就是一种格式化的消息）")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("直接通信方式")]),t._v(" "),a("p",[t._v("消息直接挂到接收进程的消息缓冲队列上")])]),t._v(" "),a("li",[a("p",[t._v("间接通信方式")]),t._v(" "),a("p",[t._v("消息要先发送到中间实体（信箱）中，因此也称“信箱通信方式”。例：计算机网络中的电子邮件系统")])])]),t._v(" "),a("h3",{attrs:{id:"线程概念和多线程模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程概念和多线程模型"}},[t._v("#")]),t._v(" 线程概念和多线程模型")]),t._v(" "),a("h4",{attrs:{id:"什么是线程-为什么要引入线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是线程-为什么要引入线程"}},[t._v("#")]),t._v(" 什么是线程，为什么要引入线程？")]),t._v(" "),a("p",[t._v("在还没引入线程之前，系统中各个程序只能串行执行。")]),t._v(" "),a("p",[t._v("进程是程序的一次执行，但是这些功能显然不可能是由一个程序顺序处理就能实现的。")]),t._v(" "),a("p",[t._v("有的进程可能需要“同时”做很多事，而传统的进程只能串行的执行一系列程序。为此，引入了“线程”，来增加并发度。")]),t._v(" "),a("p",[t._v("传统的进程是程序执行流的最小单位，引入线程后，线程成了程序执行流的最小单位。")]),t._v(" "),a("p",[t._v("可以把线程理解为“轻量级进程”。")]),t._v(" "),a("p",[t._v("线程是一个基本的CPU执行单元，也是程序执行流的最小单位。引入线程之后，不仅进程之间可以并发，进程内的各线程之间也可以并发，从而进一步提升了系统的并发度，使得一个进程内也可以并发处理各种任务。")]),t._v(" "),a("p",[t._v("引入线程后，进程只作为除CPU之外的系统资源的分配单元（如打印机、内存地址空间等都是分配给进程的）。")]),t._v(" "),a("h4",{attrs:{id:"引入线程机制后-有什么变化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#引入线程机制后-有什么变化"}},[t._v("#")]),t._v(" 引入线程机制后，有什么变化？")]),t._v(" "),a("ul",[a("li",[t._v("资源分配、调度\n"),a("ul",[a("li",[t._v("传统进程机制中，进程是资源分配、调度的基本单位")]),t._v(" "),a("li",[t._v("引入线程后，进程是资源分配的基本单位，线程是调度的基本单位")])])]),t._v(" "),a("li",[t._v("并发性\n"),a("ul",[a("li",[t._v("传统进程机制中，只能进程间并发")]),t._v(" "),a("li",[t._v("引入线程后，各线程间也能并发、提升了并发度")])])]),t._v(" "),a("li",[t._v("系统开销\n"),a("ul",[a("li",[t._v("传统的进程间并发，需要切换进程的运行环境，系统开销很大")]),t._v(" "),a("li",[t._v("线程间并发，如果是同一进程内的线程切换，则不需要切换进程环境，系统开销小")]),t._v(" "),a("li",[t._v("引入线程后，并发所带来的系统开销减小")])])])]),t._v(" "),a("h4",{attrs:{id:"线程的属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程的属性"}},[t._v("#")]),t._v(" 线程的属性")]),t._v(" "),a("ul",[a("li",[t._v("线程是处理机调度的单位")]),t._v(" "),a("li",[t._v("多CPU计算机中，各个线程可占用不同的CPU")]),t._v(" "),a("li",[t._v("每个线程都有一个线程ID、线程控制块（TCB）")]),t._v(" "),a("li",[t._v("线程也有就绪、阻塞、运行三种基本状态")]),t._v(" "),a("li",[t._v("同一进程的不同线程间共享进程的资源")]),t._v(" "),a("li",[t._v("由于共享内存地址空间，同一进程中的线程间通信甚至无需系统干预")]),t._v(" "),a("li",[t._v("同一进程中的线程切换，不会引起进程切换")]),t._v(" "),a("li",[t._v("不同进程中的线程切换，会引起进程切换")]),t._v(" "),a("li",[t._v("切换同进程内的线程，系统开销很小")]),t._v(" "),a("li",[t._v("切换进程，系统开销较大")])]),t._v(" "),a("h4",{attrs:{id:"线程的实现方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程的实现方式"}},[t._v("#")]),t._v(" 线程的实现方式")]),t._v(" "),a("h5",{attrs:{id:"用户级线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用户级线程"}},[t._v("#")]),t._v(" 用户级线程")]),t._v(" "),a("p",[t._v("User-Level Thread，ULT")]),t._v(" "),a("p",[t._v("用户级线程有应用程序通过线程库实现。所有的线程管理工作都由应用程序负责（包括线程切换）")]),t._v(" "),a("p",[t._v("用户级线程中，线程切换可以在用户态下即可完成，无需操作系统干预。")]),t._v(" "),a("p",[t._v("在用户看来，是有多个线程。但在操作系统内核看来，并意识不到线程的存在。（用户级线程对用户不透明，对操作系统透明）")]),t._v(" "),a("p",[t._v("可以这样理解，”用户级线程“，就是”从用户视角看能看到的线程“。")]),t._v(" "),a("h5",{attrs:{id:"内核级线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内核级线程"}},[t._v("#")]),t._v(" 内核级线程")]),t._v(" "),a("p",[t._v("Kernel-Level Thread，KLT，又称”内核支持的线程“")]),t._v(" "),a("p",[t._v("内核级线程的管理工作由操作系统内核完成。线程调度、切换等工作都由内核负责，因此内核级线程的切换必然需要在核心态下才能完成。")]),t._v(" "),a("p",[t._v("可以这样理解，”内核级线程“就是从”操作系统内核视角看能看到的线程“。")]),t._v(" "),a("p",[a("em",[t._v("在同时支持用户级线程和内核级线程的系统中，可采用二者组合的方式：将n个用户级线程映射到m个内核级线程上（n ≥ m）")])]),t._v(" "),a("p",[a("em",[t._v("操作系统只“看得见”内核级线程，因此只有内核级线程才是处理机分配到单位。")])]),t._v(" "),a("h4",{attrs:{id:"多线程模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多线程模型"}},[t._v("#")]),t._v(" 多线程模型")]),t._v(" "),a("p",[t._v("在同时支持用户级线程和内核级线程的系统中，由几个用户级线程映射到几个内核级线程的问题引出了“多线程模型”问题。")]),t._v(" "),a("h5",{attrs:{id:"多对一模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多对一模型"}},[t._v("#")]),t._v(" 多对一模型")]),t._v(" "),a("p",[t._v("多个用户级线程映射到一个内核级线程，每个用户进程只对应一个内核级线程。")]),t._v(" "),a("p",[t._v("优点：用户级线程的切换在用户空间即可完成，不需要切换到核心态，线程管理的系统开销小，效率高。")]),t._v(" "),a("p",[t._v("缺点：当一个用户线程被阻塞后，整个进程都会被阻塞，并发度不高。多个线程不可以在多核处理机上并行运行。")]),t._v(" "),a("h5",{attrs:{id:"一对一模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一对一模型"}},[t._v("#")]),t._v(" 一对一模型")]),t._v(" "),a("p",[t._v("一个用户级线程映射到一个内核级线程。每个用户级进程有与用户级线程同数量多内核级线程。")]),t._v(" "),a("p",[t._v("优点：当一个线程被阻塞后，别多线程还可以继续执行，并发能力强。多线程可以在多核处理机上并行执行。")]),t._v(" "),a("p",[t._v("缺点：一个用户进程会占用多个内核级线程，线程切换由操作系统内核完成，需要切换到核心态，因此线程管理的成本高，开销大。")]),t._v(" "),a("h5",{attrs:{id:"多对多模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多对多模型"}},[t._v("#")]),t._v(" 多对多模型")]),t._v(" "),a("p",[t._v("n用户级线程映射到m个内核级线程（n ≥ m）。每个用户进程对应m个内核级线程。")]),t._v(" "),a("p",[t._v("优点：克服了多对一模型并发度不高的缺点，又克服了一对一模型中一个用户进程占用太多内核级线程，开销太大的缺点。")]),t._v(" "),a("h3",{attrs:{id:"处理机调度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#处理机调度"}},[t._v("#")]),t._v(" 处理机调度")]),t._v(" "),a("h4",{attrs:{id:"调度的基本概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#调度的基本概念"}},[t._v("#")]),t._v(" 调度的基本概念")]),t._v(" "),a("p",[t._v("当有一堆任务要处理，但由于资源有限，这些事情没法同时处理。这就需要确定某种规则来决定处理这些任务的顺序，这就是“调度”研究的问题。")]),t._v(" "),a("p",[t._v("在多道程序系统中，进程的数量往往是多于处理机的个数的，这样不可能同时并行处理各个进程。")]),t._v(" "),a("p",[t._v("处理机调度，就是从就绪队列中按照一定的算法选择一个进程并将处理机分配给它运行，以实现进程的并发执行。")]),t._v(" "),a("h4",{attrs:{id:"调度的三个层次"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#调度的三个层次"}},[t._v("#")]),t._v(" 调度的三个层次")]),t._v(" "),a("h5",{attrs:{id:"高级调度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#高级调度"}},[t._v("#")]),t._v(" 高级调度")]),t._v(" "),a("p",[t._v("由于内存空间有限有时无法将用户提交的作业全部放入内存，因此就需要确定某种规则来决定将作业调入内存的顺序。")]),t._v(" "),a("p",[t._v("高级调度（作业调度）。按一定的原则从外存上处于后备队列的作业中挑选一个（或多个）作业，给他们分配内存等必要资源，并建立相应的进程（建立PCB），以使它（们）获得竞争处理机的权利。")]),t._v(" "),a("p",[t._v("高级调度是辅存（外存）与内存之间的调度。每个作业只调入一次，调出一次。作业调入时会建立相应的PCB，作业调出时才撤销PCB。高级调度主要是指调入的问题，因此只有调入的时间需要操作系统来确定，但调出的时机必然是作业运行结束才调出。")]),t._v(" "),a("h5",{attrs:{id:"中级调度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#中级调度"}},[t._v("#")]),t._v(" 中级调度")]),t._v(" "),a("p",[t._v("引入了虚拟存储技术之后，可将暂时不能运行的进程调至外存等待。等它重新具备了运行条件且内存又稍有空闲时，再重新调入内存。")]),t._v(" "),a("p",[t._v("这么做的目的是为了提高内存利用率和系统吞吐量。")]),t._v(" "),a("p",[t._v("暂时调到外存等待的进程状态为挂起状态。值得注意的是，PCB并不会一起调到外存，而是会常驻内存。PCB中会记录进程数据在外存中的存放位置，进程状态等信息，操作系统通过内存中的PCB来保持对各个进程的监控、管理。被挂起的进程PCB会被放到挂起队列中。")]),t._v(" "),a("p",[t._v("中级调度（内存调度），就是要决定将哪个处于挂起状态的进程重新调入内存。")]),t._v(" "),a("p",[t._v("一个进程可能会被多次调出、调入内存，因此中级调度发生的频率要比高级调度更高。")]),t._v(" "),a("h5",{attrs:{id:"进程挂起状态与七状态模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程挂起状态与七状态模型"}},[t._v("#")]),t._v(" 进程挂起状态与七状态模型")]),t._v(" "),a("p",[t._v("暂时调到外存等待的进程状态为挂起状态（挂起态，suspend）")]),t._v(" "),a("p",[t._v("挂起状态又可以进一步分为就绪挂起、阻塞挂起两种状态。")]),t._v(" "),a("p",[t._v("创建态 → 就绪挂起")]),t._v(" "),a("p",[t._v("就绪态 ↔ 就绪挂起")]),t._v(" "),a("p",[t._v("运行态 → 就绪挂起")]),t._v(" "),a("p",[t._v("阻塞态 ↔ 阻塞挂起")]),t._v(" "),a("p",[t._v("阻塞态 → 就绪挂起")]),t._v(" "),a("p",[t._v("注意“挂起”和”阻塞“的区别，两种状态都是暂时不能获得PCB的服务，但挂起状态是将进程映像调到外存去了，而阻塞态下进程映像还在内存中。")]),t._v(" "),a("p",[t._v("有的操作系统会把就绪挂起、阻塞挂起分为两个挂起队列，甚至会根据阻塞原因不同再把阻塞挂起进程进一步细分为多个队列。")]),t._v(" "),a("h5",{attrs:{id:"低级调度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#低级调度"}},[t._v("#")]),t._v(" 低级调度")]),t._v(" "),a("p",[t._v("低级调度（进程调度），其主要任务是按照某种方法和策略从就绪队列中选取一个进程，将处理机分配给它。")]),t._v(" "),a("p",[t._v("进程调度是操作系统中最基本的一种调度，在一般的操作系统中都必须配置进程调度。")]),t._v(" "),a("p",[t._v("进程调度的频率很高，一般几十毫秒一次。")]),t._v(" "),a("h5",{attrs:{id:"三层调度的联系、对比"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三层调度的联系、对比"}},[t._v("#")]),t._v(" 三层调度的联系、对比")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th"),t._v(" "),a("th",[t._v("要做什么")]),t._v(" "),a("th",[t._v("调度发生在..")]),t._v(" "),a("th",[t._v("发生频率")]),t._v(" "),a("th",[t._v("对进程状态的影响")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("高级调度（作业调度）")]),t._v(" "),a("td",[t._v("按照某种规则，从后背队列中选择合适的作业将其调入内存，并为其创建进程")]),t._v(" "),a("td",[t._v("外存 → 内存（面向作业）")]),t._v(" "),a("td",[t._v("最低")]),t._v(" "),a("td",[t._v("无 → 创建态 → 就绪态")])]),t._v(" "),a("tr",[a("td",[t._v("中级调度（内存调度）")]),t._v(" "),a("td",[t._v("按照某种规则，从挂起队列中选择合适的进程将其数据调回内存")]),t._v(" "),a("td",[t._v("外存 → 内存（面向进程）")]),t._v(" "),a("td",[t._v("中等")]),t._v(" "),a("td",[t._v("挂起态 → 就绪态"),a("br"),t._v("（阻塞挂起 → 阻塞态）")])]),t._v(" "),a("tr",[a("td",[t._v("低级调度（进程调度）")]),t._v(" "),a("td",[t._v("按照某种规则，从就绪队列中选择一个进程为其分配处理机")]),t._v(" "),a("td",[t._v("内存 → CPU")]),t._v(" "),a("td",[t._v("最高")]),t._v(" "),a("td",[t._v("就绪态 → 运行态")])])])]),t._v(" "),a("h3",{attrs:{id:"进程调度的时机、切换与过程、方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程调度的时机、切换与过程、方式"}},[t._v("#")]),t._v(" 进程调度的时机、切换与过程、方式")]),t._v(" "),a("h4",{attrs:{id:"进程调度的时机"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程调度的时机"}},[t._v("#")]),t._v(" 进程调度的时机")]),t._v(" "),a("p",[t._v("进程调度（低级调度），就是按照某种算法从就绪队列中选择一个进程为其分配处理机。")]),t._v(" "),a("h5",{attrs:{id:"需要进行进程调度与切换的情况"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#需要进行进程调度与切换的情况"}},[t._v("#")]),t._v(" 需要进行进程调度与切换的情况")]),t._v(" "),a("ul",[a("li",[t._v("当前运行的进程主动放弃处理机\n"),a("ul",[a("li",[t._v("进程正常终止")]),t._v(" "),a("li",[t._v("运行过程中发生异常而终止")]),t._v(" "),a("li",[t._v("进程主动请求阻塞（如 等待I/O）")])])]),t._v(" "),a("li",[t._v("当前运行的进程被动放弃处理机\n"),a("ul",[a("li",[t._v("分给进程的时间片用完")]),t._v(" "),a("li",[t._v("有更紧急的事要处理（如I/O中断）")]),t._v(" "),a("li",[t._v("有更高优先级的进程进入就绪队列")])])])]),t._v(" "),a("h4",{attrs:{id:"不能进行进程调度与切换的情况"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不能进行进程调度与切换的情况"}},[t._v("#")]),t._v(" 不能进行进程调度与切换的情况")]),t._v(" "),a("ol",[a("li",[t._v("在处理中断的过程中。中断处理过程复杂，与硬件密切相关，很难做到在中断处理过程中进行进程切换。")]),t._v(" "),a("li",[t._v("进程在操作系统内核程序临界区中。")]),t._v(" "),a("li",[t._v("在原子操作过程中（原语）。原子操作不可中断，要一气呵成（如之前讲过的修改PCB中进程状态标志，并把PCB放到相应队列）")])]),t._v(" "),a("h4",{attrs:{id:"临界区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#临界区"}},[t._v("#")]),t._v(" 临界区")]),t._v(" "),a("p",[t._v("进程在操作系统内核程序临界区中不能进行调度与切换 ✅")]),t._v(" "),a("p",[t._v("进程处于临界区时不能进行处理机调度 ❌")]),t._v(" "),a("h5",{attrs:{id:"临界区资源"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#临界区资源"}},[t._v("#")]),t._v(" 临界区资源")]),t._v(" "),a("p",[t._v("一个时间段内只允许一个进程使用的资源。各进程需要互斥的访问临界资源。")]),t._v(" "),a("h5",{attrs:{id:"临界区-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#临界区-2"}},[t._v("#")]),t._v(" 临界区")]),t._v(" "),a("p",[t._v("访问临界资源的那段代码。")]),t._v(" "),a("h5",{attrs:{id:"内核临界区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内核临界区"}},[t._v("#")]),t._v(" 内核临界区")]),t._v(" "),a("p",[t._v("一般是用来访问某种内核数据结构的，比如进程的就绪队列（由各就绪进程的PCB组成）")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("进程 → 就绪队列（锁定）")]),t._v(" "),a("p",[t._v("如果还没退出临界区（还没解锁）就进行进程调度，但是进程调度相关的程序也需要访问就绪队列，但此时就绪队列被锁住了，因此又无法顺利进行进程调度。")]),t._v(" "),a("p",[t._v("内核程序临界区访问的临界资源如果不尽快释放的话，极有可能影响到操作系统内核的其他管理工作。因此在访问内核程序临界区期间不能进行调度与切换。")])]),t._v(" "),a("li",[a("p",[t._v("进程 → I/O设备（打印机）")]),t._v(" "),a("p",[t._v("在打印机打印完成之前，进程一直处于临界区内，临界资源不会解锁。但打印机又是很慢速的设备，此时如果一直不允许进程调度的话就会导致CPU一直空闲。")]),t._v(" "),a("p",[t._v("普通临界区访问的临界资源不会直接影响操作系统内核的管理工作。因此在访问普通临界区时可以进行调度与切换。")])])]),t._v(" "),a("h4",{attrs:{id:"进程调度的方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程调度的方式"}},[t._v("#")]),t._v(" 进程调度的方式")]),t._v(" "),a("h5",{attrs:{id:"非剥夺调度方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#非剥夺调度方式"}},[t._v("#")]),t._v(" 非剥夺调度方式")]),t._v(" "),a("p",[t._v("又称非抢占方式。即，只允许进程主动放弃处理机。在运行过程中即便有更紧迫的任务到达，当前进程依然会继续使用处理机，直到该进程终止或主动要求进入阻塞态。")]),t._v(" "),a("p",[t._v("特点：实现简单，系统开销小但是无法及时处理紧急任务，适合与早期的批处理系统。")]),t._v(" "),a("h5",{attrs:{id:"剥夺调度方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#剥夺调度方式"}},[t._v("#")]),t._v(" 剥夺调度方式")]),t._v(" "),a("p",[t._v("又称抢占方式。当一个进程正在处理机上执行时，如果有一个更重要或更紧迫的进程需要使用处理机，则立即暂停正在执行的进程，将处理机分配给更重要紧迫的那个进程。")]),t._v(" "),a("p",[t._v("特点：可以优先处理更紧急的进程，也可实现让各进程按时间片轮流执行的功能（通过时钟中断）。适合分时操作系统、实时操作系统。")]),t._v(" "),a("h4",{attrs:{id:"进程的切换与过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程的切换与过程"}},[t._v("#")]),t._v(" 进程的切换与过程")]),t._v(" "),a("h5",{attrs:{id:"进程调度与进程切换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程调度与进程切换"}},[t._v("#")]),t._v(" 进程调度与进程切换")]),t._v(" "),a("p",[t._v("”狭义的进程调度“与”进程切换“的区别：")]),t._v(" "),a("p",[t._v("狭义的进程调度指的是从就绪队列中选中一个要运行的进程。（这个进程可以是刚刚被暂停执行的进程，也可能是另一个进程，后一种情况就需要进程切换）")]),t._v(" "),a("p",[t._v("进程切换是指一个进程让出处理机，由另一个进程占用处理机的过程。")]),t._v(" "),a("p",[t._v("广义的进程调度包含了选择一个进程和进程切换两个步骤。")]),t._v(" "),a("p",[t._v("进程切换的过程主要完成了：")]),t._v(" "),a("ol",[a("li",[t._v("对原来运行进程各种数据的保存")]),t._v(" "),a("li",[t._v("对新的进程各种数据的恢复（如：程序计数器、程序状态字、各种数据寄存器等处理机现场信息，这些信息一般保存在进程控制快PCB中）")])]),t._v(" "),a("p",[t._v("注意：")]),t._v(" "),a("p",[t._v("进程切换是有代价的。因此如果过于频繁的进行进程调度、切换，必然会使整个系统的效率降低，使系统大部分时间都花在了进程切换上，而真正用于执行进程的时间减少。")]),t._v(" "),a("h3",{attrs:{id:"调度算法的评价指标"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#调度算法的评价指标"}},[t._v("#")]),t._v(" 调度算法的评价指标")]),t._v(" "),a("h4",{attrs:{id:"cpu利用率"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cpu利用率"}},[t._v("#")]),t._v(" CPU利用率")]),t._v(" "),a("p",[t._v("由于早期的CPU造价机器昂贵，因此人们会希望让CPU尽可能多的工作。")]),t._v(" "),a("p",[t._v("CPU利用率：")]),t._v(" "),a("p",[t._v("​\t指CPU“忙碌”的时间占总时间的比例。\n$$\n利用率 = \\frac{忙碌的时间}{总时间}\n$$\n例：某计算机只支持单道程序，某个作业刚开始需要在CPU上运行5秒，再用打印机打印机，再用打印机打印输出5秒，之后再执行5秒，才能结束。在此过程中，CPU利用率、打印机利用率分别是多少？")]),t._v(" "),a("p",[t._v("CPU利用率 = (5 + 5) / (5+5+5) = 66.66%")]),t._v(" "),a("p",[t._v("CPU利用率 = 5 / (5+5+5) = 33.33%")]),t._v(" "),a("h4",{attrs:{id:"系统吞吐量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#系统吞吐量"}},[t._v("#")]),t._v(" 系统吞吐量")]),t._v(" "),a("p",[t._v("对于计算机来说，希望能用尽可能少的时间处理完尽可能多的作业")]),t._v(" "),a("p",[t._v("系统吞吐量：")]),t._v(" "),a("p",[t._v("​\t单位时间内完成作业的数量\n$$\n系统吞吐量 = \\frac{总共完成了多少道作业}{总共花了多少时间}\n$$\n例：某计算机系统处理完10道作业，共花费100秒，则系统吞吐量为？")]),t._v(" "),a("p",[t._v("10 / 100 = 0.1道/秒")]),t._v(" "),a("h4",{attrs:{id:"周转时间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#周转时间"}},[t._v("#")]),t._v(" 周转时间")]),t._v(" "),a("p",[t._v("对于计算机的用户来说，他们很关心自己的作业从提交到完成花了多少时间。")]),t._v(" "),a("p",[t._v("周转时间，是指从作业被提交给系统开始，到作业完成为止的这段时间间隔。")]),t._v(" "),a("p",[t._v("它包括四个部分：")]),t._v(" "),a("ul",[a("li",[t._v("作业在外存后备队列上等待作业调度（高级调度）的时间")]),t._v(" "),a("li",[t._v("进程在就绪队列上等待进程调度（低级调度）的时间")]),t._v(" "),a("li",[t._v("进程在CPU上执行的时间")]),t._v(" "),a("li",[t._v("进程等待I/O操作完成的时间。")])]),t._v(" "),a("p",[t._v("后三项在一个作业的整个处理过程中，可能发生多次。")]),t._v(" "),a("h5",{attrs:{id:"周转时间与平均周转时间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#周转时间与平均周转时间"}},[t._v("#")]),t._v(" 周转时间与平均周转时间")]),t._v(" "),a("p",[t._v("$$\n（作业）周转时间 = 作业完成时间 - 作业提交时间 \\[2ex]\n平均周转时间 = \\frac{各作业周转时间之和}{作业数}\n$$")]),t._v(" "),a("p",[t._v("对于用户来说，更关心自己的单个作业的周转时间。")]),t._v(" "),a("p",[t._v("对于操作系统来说，更关心系统的整体表现，因此更关心所有作业周转时间的平均值。")]),t._v(" "),a("h5",{attrs:{id:"带权周转时间与平均带权周转时间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#带权周转时间与平均带权周转时间"}},[t._v("#")]),t._v(" 带权周转时间与平均带权周转时间")]),t._v(" "),a("p",[t._v("$$\n带权周转时间 = \\frac{作业周转时间}{作业时机运行时间} = \\frac{作业完成时间 - 作业提交时间}{作业实际运行的时间}\n平均带权周转时间 = \\frac{各作业带权周转时间之和}{作业数}\n$$")]),t._v(" "),a("p",[t._v("带权周转时间必然≥1，带权周转时间与周转时间都是越小越好。")]),t._v(" "),a("p",[t._v("对于周转时间相同的两个作业，实际运行时间长的作业在相同时间内被服务时间更多，带权周转时间更小，用户满意度更高。")]),t._v(" "),a("p",[t._v("对于实际运行时间相同的两个作业，周转时间短的带权周转时间更小，用户满意度更高。")]),t._v(" "),a("h5",{attrs:{id:"等待时间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#等待时间"}},[t._v("#")]),t._v(" 等待时间")]),t._v(" "),a("p",[t._v("计算机的用户希望自己的作业尽可能少的等待处理机。")]),t._v(" "),a("p",[t._v("等待时间，指进程/作业处于等待处理机状态时间之和，等待时间越长，用户满意度越低。")]),t._v(" "),a("p",[t._v("对于进程来说，等待时间就是指进程建立后等待被服务的时间之和，在等待I/O完成的期间其实进程也是被服务的，所以不计入等待时间。")]),t._v(" "),a("p",[t._v("对于作业来说，不仅要考虑建立进程后的等待时间，还要加上作业在外存后备队列中等待时间。")]),t._v(" "),a("p",[t._v("一个作业总共需要被CPU服务多久，被I/O设备服务多久一般是确定不变的，因此调度算法其实只会影响作业/进程的等待时间。当然，与前面指标类似，也有’‘平均等待时间“来评价整体性能。")]),t._v(" "),a("h4",{attrs:{id:"响应时间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#响应时间"}},[t._v("#")]),t._v(" 响应时间")]),t._v(" "),a("p",[t._v("对于计算机用户来说，会希望自己的提交的请求（比如通过键盘输入了一个调试命令）尽早的开始被系统服务、相应。")]),t._v(" "),a("p",[t._v("响应时间，指从用户提交请求到首次产生响应所用的时间。")]),t._v(" "),a("h3",{attrs:{id:"调度算法-fcfs、sjf、hrrn"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#调度算法-fcfs、sjf、hrrn"}},[t._v("#")]),t._v(" 调度算法（FCFS、SJF、HRRN）")]),t._v(" "),a("h4",{attrs:{id:"先来先服务-fcfs-first-come-first-serve"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#先来先服务-fcfs-first-come-first-serve"}},[t._v("#")]),t._v(" 先来先服务（FCFS，First Come First Serve）")]),t._v(" "),a("h5",{attrs:{id:"算法思想"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法思想"}},[t._v("#")]),t._v(" 算法思想")]),t._v(" "),a("p",[t._v("主要从“公平”角度考虑（类似生活中排队买东西的例子）")]),t._v(" "),a("h5",{attrs:{id:"算法规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法规则"}},[t._v("#")]),t._v(" 算法规则")]),t._v(" "),a("p",[t._v("按照作业/进程到达的先后顺序进行服务")]),t._v(" "),a("h5",{attrs:{id:"用于作业-进程调度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用于作业-进程调度"}},[t._v("#")]),t._v(" 用于作业/进程调度")]),t._v(" "),a("p",[t._v("用于作业调度时，考虑的是哪个作业先到达后备队列，用于进程调度时，考虑的是哪个进程先到达就绪队列")]),t._v(" "),a("h5",{attrs:{id:"是否可抢占"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#是否可抢占"}},[t._v("#")]),t._v(" 是否可抢占？")]),t._v(" "),a("p",[t._v("非抢占式的算法")]),t._v(" "),a("h5",{attrs:{id:"优缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优缺点"}},[t._v("#")]),t._v(" 优缺点")]),t._v(" "),a("p",[t._v("优点：公平、算法实现简单")]),t._v(" "),a("p",[t._v("缺点：排队长作业（进程）后面的短作业需要等待很长时间，带权周转时间很大，对短作业来说用户体验不好。即，FCFS算法对长作业有利，对短作业不利。")]),t._v(" "),a("h5",{attrs:{id:"是否会导致饥饿"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#是否会导致饥饿"}},[t._v("#")]),t._v(" 是否会导致饥饿")]),t._v(" "),a("p",[t._v("不会")]),t._v(" "),a("p",[t._v("例：")]),t._v(" "),a("p",[t._v("各进程到达就绪队列的时间、需要的运行时间如下表所示。使用先来先服务调度算法，计算各进程的等待时间、平均等待时间、周转时间、平均周转时间、带权周转时间、平均带权周转时间。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("进程")]),t._v(" "),a("th",[t._v("到达时间")]),t._v(" "),a("th",[t._v("运行时间")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("P1")]),t._v(" "),a("td",[t._v("0")]),t._v(" "),a("td",[t._v("7")])]),t._v(" "),a("tr",[a("td",[t._v("P2")]),t._v(" "),a("td",[t._v("2")]),t._v(" "),a("td",[t._v("4")])]),t._v(" "),a("tr",[a("td",[t._v("P3")]),t._v(" "),a("td",[t._v("4")]),t._v(" "),a("td",[t._v("1")])]),t._v(" "),a("tr",[a("td",[t._v("P4")]),t._v(" "),a("td",[t._v("5")]),t._v(" "),a("td",[t._v("4")])])])]),t._v(" "),a("p",[t._v("先来先服务调度算法：按照到达的先后顺序调度")]),t._v(" "),a("p",[t._v("调度顺序：P1 → P2 → P3  → P4")]),t._v(" "),a("p",[t._v("周转时间 = 完成时间 - 到达时间")]),t._v(" "),a("p",[t._v("P1 = 7 - 0 = 7")]),t._v(" "),a("p",[t._v("P2 = 11 - 2 = 9")]),t._v(" "),a("p",[t._v("P3 = 12 - 4 = 8")]),t._v(" "),a("p",[t._v("P4 = 16 - 5 = 11")]),t._v(" "),a("p",[t._v("带权周转时间 = 周转时间 / 运行时间")]),t._v(" "),a("p",[t._v("P1 = 7 / 7 = 1")]),t._v(" "),a("p",[t._v("P2 = 9 / 4 = 2.25")]),t._v(" "),a("p",[t._v("P3 = 8 / 1 = 8")]),t._v(" "),a("p",[t._v("P4 = 11 / 4 = 2.75")]),t._v(" "),a("p",[t._v("等待时间 = 周转时间 - 运行时间")]),t._v(" "),a("p",[t._v("P1 = 7 - 7 = 0")]),t._v(" "),a("p",[t._v("P2 = 9 - 4 = 5")]),t._v(" "),a("p",[t._v("P3 = 8 - 1 = 7")]),t._v(" "),a("p",[t._v("P4 = 11 - 4 = 7")]),t._v(" "),a("p",[t._v("平均周转时间 = (7 + 9 + 8 + 11) / 4 = 8.75")]),t._v(" "),a("p",[t._v("平均带权周转时间 = (1 + 2.25 + 8 + 2.75) / 4 = 3.5")]),t._v(" "),a("p",[t._v("平均等待时间 = (0 + 5 + 7 +7) / 4 = 4.75")]),t._v(" "),a("h4",{attrs:{id:"短作业优先-sjf-shortest-job-first"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#短作业优先-sjf-shortest-job-first"}},[t._v("#")]),t._v(" 短作业优先（SJF，Shortest Job First）")]),t._v(" "),a("h5",{attrs:{id:"算法思想-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法思想-2"}},[t._v("#")]),t._v(" 算法思想")]),t._v(" "),a("p",[t._v("追求最少都平均等待时间，最少的平均周转时间，最少平均带权周转时间")]),t._v(" "),a("h5",{attrs:{id:"算法规则-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法规则-2"}},[t._v("#")]),t._v(" 算法规则")]),t._v(" "),a("p",[t._v("最短的作业/进程优先得到服务（所谓“最短”，是指要求服务时间最短）")]),t._v(" "),a("h5",{attrs:{id:"用于作业-进程调度-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用于作业-进程调度-2"}},[t._v("#")]),t._v(" 用于作业/进程调度")]),t._v(" "),a("p",[t._v("既可用于作业调度，也可用于进程调度。用于进程调度时称为“短进程优先（SPF，Shortest Process First）算法”")]),t._v(" "),a("h5",{attrs:{id:"是否可抢占-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#是否可抢占-2"}},[t._v("#")]),t._v(" 是否可抢占？")]),t._v(" "),a("p",[t._v("SJF和SPF是非抢占式的算法。但是也有抢占式的版本--最短剩余时间优先算法（SRTN，Shortest Remaining Time Next）")]),t._v(" "),a("h5",{attrs:{id:"优缺点-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优缺点-2"}},[t._v("#")]),t._v(" 优缺点")]),t._v(" "),a("p",[t._v("优点：“最短的”（有限制条件）平均等待时间、平均周转时间")]),t._v(" "),a("p",[t._v("缺点：不公平。对短作业有利，对长作业不利，可能产生饥饿现象。另外，作业/进程的运行时间是由用户提供的，不一定真实，不一定能做到真正的短作业优先")]),t._v(" "),a("h5",{attrs:{id:"是否会导致饥饿-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#是否会导致饥饿-2"}},[t._v("#")]),t._v(" 是否会导致饥饿")]),t._v(" "),a("p",[t._v("会导致饥饿，如果源源不断的有短作业/进程到来，可能使长作业/进程长时间得不到服务，产生“饥饿”现象。如果一直得不到服务，则称为“饿死”")]),t._v(" "),a("h5",{attrs:{id:"短进程优先调度算法-spf"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#短进程优先调度算法-spf"}},[t._v("#")]),t._v(" 短进程优先调度算法（SPF）")]),t._v(" "),a("p",[t._v("例：")]),t._v(" "),a("p",[t._v("各进程到达就绪队列的时间、需要的运行时间如下表所示。使用非抢占式的短作业优先调度算法（SPF），计算各进程的等待时间、平均等待时间、周转时间、平均周转时间、带权周转时间、平均带权周转时间。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("进程")]),t._v(" "),a("th",[t._v("到达时间")]),t._v(" "),a("th",[t._v("运行时间")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("P1")]),t._v(" "),a("td",[t._v("0")]),t._v(" "),a("td",[t._v("7")])]),t._v(" "),a("tr",[a("td",[t._v("P2")]),t._v(" "),a("td",[t._v("2")]),t._v(" "),a("td",[t._v("4")])]),t._v(" "),a("tr",[a("td",[t._v("P3")]),t._v(" "),a("td",[t._v("4")]),t._v(" "),a("td",[t._v("1")])]),t._v(" "),a("tr",[a("td",[t._v("P4")]),t._v(" "),a("td",[t._v("5")]),t._v(" "),a("td",[t._v("4")])])])]),t._v(" "),a("p",[t._v("短作业/进程优先调度算法：每次调度时选择当前已到达且运行时间最短的作业/进程")]),t._v(" "),a("p",[t._v("调度顺序：P1 → P3 → P2  → P4")]),t._v(" "),a("p",[t._v("周转时间 = 完成时间 - 到达时间")]),t._v(" "),a("p",[t._v("P1 = 7 - 0 = 7")]),t._v(" "),a("p",[t._v("P3 = 8 - 4 = 4")]),t._v(" "),a("p",[t._v("P2 = 12 - 2 = 10")]),t._v(" "),a("p",[t._v("P4 = 16 - 5 = 11")]),t._v(" "),a("p",[t._v("带权周转时间 = 周转时间 / 运行时间")]),t._v(" "),a("p",[t._v("P1 = 7 / 7 = 1")]),t._v(" "),a("p",[t._v("P3 = 4 / 1 = 4")]),t._v(" "),a("p",[t._v("P2 = 10 / 4 = 2.5")]),t._v(" "),a("p",[t._v("P4 = 11 / 4 = 2.75")]),t._v(" "),a("p",[t._v("等待时间 = 周转时间 - 运行时间")]),t._v(" "),a("p",[t._v("P1 = 7 - 7 = 0")]),t._v(" "),a("p",[t._v("P3 = 4 - 1 = 3")]),t._v(" "),a("p",[t._v("P2 = 10 - 4 = 6")]),t._v(" "),a("p",[t._v("P4 = 11 - 4 = 7")]),t._v(" "),a("p",[t._v("平均周转时间 = (7 + 4 + 10 + 11) / 4 = 8")]),t._v(" "),a("p",[t._v("平均带权周转时间 = (1 + 4 + 2.5 + 2.75) / 4 = 2.56")]),t._v(" "),a("p",[t._v("平均等待时间 = (0 + 3 + 6 +7) / 4 = 4")]),t._v(" "),a("p",[a("em",[t._v("对比FCFS算法的结果，显然SPF算法的平均等待/周转/带权周转时间都要更低")])]),t._v(" "),a("h5",{attrs:{id:"最短剩余时间优先算法-srtn"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#最短剩余时间优先算法-srtn"}},[t._v("#")]),t._v(" 最短剩余时间优先算法（SRTN）")]),t._v(" "),a("p",[t._v("例：")]),t._v(" "),a("p",[t._v("各进程到达就绪队列的时间、需要的运行时间如下表所示。使用抢占式的短作业优先调度算法（SRTN），计算各进程的等待时间、平均等待时间、周转时间、平均周转时间、带权周转时间、平均带权周转时间。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("进程")]),t._v(" "),a("th",[t._v("到达时间")]),t._v(" "),a("th",[t._v("运行时间")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("P1")]),t._v(" "),a("td",[t._v("0")]),t._v(" "),a("td",[t._v("7")])]),t._v(" "),a("tr",[a("td",[t._v("P2")]),t._v(" "),a("td",[t._v("2")]),t._v(" "),a("td",[t._v("4")])]),t._v(" "),a("tr",[a("td",[t._v("P3")]),t._v(" "),a("td",[t._v("4")]),t._v(" "),a("td",[t._v("1")])]),t._v(" "),a("tr",[a("td",[t._v("P4")]),t._v(" "),a("td",[t._v("5")]),t._v(" "),a("td",[t._v("4")])])])]),t._v(" "),a("p",[t._v("最短剩余时间优先算法：")]),t._v(" "),a("p",[t._v("每当有进程加入就绪队列改变时就需要调度，如果新到达的进程剩余时间比当前运行的进程剩余时间更短，则由新进程抢占处理机，当前运行进程重新回到就绪队列。另外，当一个进程完成时也需要调度。")]),t._v(" "),a("p",[t._v("需要注意的是，当有新进程到达时就绪队列就会改变，就要按照上述规则进行检查。以下P"),a("sub",[t._v("n")]),t._v("（m）表示当前P"),a("sub",[t._v("n")]),t._v("进程剩余时间为m。各个时刻的情况如下：")]),t._v(" "),a("p",[t._v("0时刻（P1到达）：P"),a("sub",[t._v("1")]),t._v("(7)")]),t._v(" "),a("p",[t._v("2时刻（P2到达）：P"),a("sub",[t._v("1")]),t._v("(5)、P"),a("sub",[t._v("2")]),t._v("(4)")]),t._v(" "),a("p",[t._v("4时刻（P3到达）：P"),a("sub",[t._v("1")]),t._v("(5)、P"),a("sub",[t._v("2")]),t._v("(2)、P"),a("sub",[t._v("3")]),t._v("(1)")]),t._v(" "),a("p",[t._v("5时刻（P3完成且P4刚好到达）：P"),a("sub",[t._v("1")]),t._v("(5)、P"),a("sub",[t._v("2")]),t._v("(2)、P"),a("sub",[t._v("4")]),t._v("(4)")]),t._v(" "),a("p",[t._v("7时刻（P2完成）：P"),a("sub",[t._v("1")]),t._v("(5)、P"),a("sub",[t._v("4")]),t._v("(4)")]),t._v(" "),a("p",[t._v("11时刻（P4完成）：P"),a("sub",[t._v("1")]),t._v("(5)")]),t._v(" "),a("p",[t._v("16时刻（P5完成）")]),t._v(" "),a("p",[t._v("周转时间 = 完成时间 - 到达时间")]),t._v(" "),a("p",[t._v("P1 = 16 - 0 = 16")]),t._v(" "),a("p",[t._v("P2 = 7 - 2 = 5")]),t._v(" "),a("p",[t._v("P3 = 5 - 4 = 1")]),t._v(" "),a("p",[t._v("P4 = 11 - 5 = 6")]),t._v(" "),a("p",[t._v("带权周转时间 = 周转时间 / 运行时间")]),t._v(" "),a("p",[t._v("P1 = 16 / 7 = 2.28")]),t._v(" "),a("p",[t._v("P2 = 5 / 4 = 1.25")]),t._v(" "),a("p",[t._v("P3 = 1 / 1 = 1")]),t._v(" "),a("p",[t._v("P4 = 6 / 4 = 1.5")]),t._v(" "),a("p",[t._v("等待时间 = 周转时间 - 运行时间")]),t._v(" "),a("p",[t._v("P1 = 16 - 7 = 9")]),t._v(" "),a("p",[t._v("P2 = 5 - 4 = 1")]),t._v(" "),a("p",[t._v("P3 = 1 - 1 = 0")]),t._v(" "),a("p",[t._v("P4 = 6 - 4 = 2")]),t._v(" "),a("p",[t._v("平均周转时间 = (16 + 5 + 1 + 6) / 4 = 7")]),t._v(" "),a("p",[t._v("平均带权周转时间 = (2.28 + 1.25 + 1 + 1.5) / 4 = 1.5")]),t._v(" "),a("p",[t._v("平均等待时间 = (9 + 1 + 0 +2) / 4 = 3")]),t._v(" "),a("p",[a("em",[t._v("对比非抢占式的短作业优先算法，显然抢占式的这几个指标又要更低")])]),t._v(" "),a("h4",{attrs:{id:"高响应比优先-hrrn-highest-response-ratio-next"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#高响应比优先-hrrn-highest-response-ratio-next"}},[t._v("#")]),t._v(" 高响应比优先（HRRN，Highest Response Ratio Next）")]),t._v(" "),a("h5",{attrs:{id:"算法思想-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法思想-3"}},[t._v("#")]),t._v(" 算法思想")]),t._v(" "),a("p",[t._v("要综合考虑作业/进程的等待时间和要求服务时间")]),t._v(" "),a("h5",{attrs:{id:"算法规则-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法规则-3"}},[t._v("#")]),t._v(" 算法规则")]),t._v(" "),a("p",[t._v("在每次调度时先计算各个作业/进程的响应比，选择响应比最高的作业/进程为其服务")]),t._v(" "),a("p",[t._v("响应比 = (等待时间 + 要求服务时间) / 要求服务时间")]),t._v(" "),a("h5",{attrs:{id:"用于作业-进程调度-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用于作业-进程调度-3"}},[t._v("#")]),t._v(" 用于作业/进程调度")]),t._v(" "),a("p",[t._v("既可用于作业调度，也可用于进程调度。")]),t._v(" "),a("h5",{attrs:{id:"是否可抢占-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#是否可抢占-3"}},[t._v("#")]),t._v(" 是否可抢占？")]),t._v(" "),a("p",[t._v("非抢占式的算法。因此只有当前运行的作业/进程主动放弃处理机时，才需要调度，才需要计算响应比")]),t._v(" "),a("h5",{attrs:{id:"优缺点-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优缺点-3"}},[t._v("#")]),t._v(" 优缺点")]),t._v(" "),a("p",[t._v("综合考虑了等待时间和运行时间（要求服务时间）")]),t._v(" "),a("p",[t._v("等待时间相同时，要求服务时间短的优先（SJF的优点）")]),t._v(" "),a("p",[t._v("要求服务时间相同时，等待时间长的优先（FCFS的优点）")]),t._v(" "),a("p",[t._v("对于长作业来说，随着等待时间越来越久，其相应比也会越来越大，从而避免了长作业饥饿的问题")]),t._v(" "),a("h5",{attrs:{id:"是否会导致饥饿-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#是否会导致饥饿-3"}},[t._v("#")]),t._v(" 是否会导致饥饿")]),t._v(" "),a("p",[t._v("不会")]),t._v(" "),a("p",[t._v("例：")]),t._v(" "),a("p",[t._v("各进程到达就绪队列的时间、需要的运行时间如下表所示。使用抢占式的短作业优先调度算法（SRTN），计算各进程的等待时间、平均等待时间、周转时间、平均周转时间、带权周转时间、平均带权周转时间。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("进程")]),t._v(" "),a("th",[t._v("到达时间")]),t._v(" "),a("th",[t._v("运行时间")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("P1")]),t._v(" "),a("td",[t._v("0")]),t._v(" "),a("td",[t._v("7")])]),t._v(" "),a("tr",[a("td",[t._v("P2")]),t._v(" "),a("td",[t._v("2")]),t._v(" "),a("td",[t._v("4")])]),t._v(" "),a("tr",[a("td",[t._v("P3")]),t._v(" "),a("td",[t._v("4")]),t._v(" "),a("td",[t._v("1")])]),t._v(" "),a("tr",[a("td",[t._v("P4")]),t._v(" "),a("td",[t._v("5")]),t._v(" "),a("td",[t._v("4")])])])]),t._v(" "),a("p",[t._v("高响应比优先算法：")]),t._v(" "),a("p",[t._v("非抢占式的调度算法，只有当前运行的进程主动放弃CPU时（正常/异常完成，或主动阻塞），才需要进行调度，调度时计算所有就绪程序的响应比，选响应比最高的进程上处理机。\n$$\n响应比 = \\frac{等待时间 + 要求服务时间}{要求服务时间}\n$$\n0时刻：只有P"),a("sub",[t._v("1")]),t._v("到达就绪队列，P"),a("sub",[t._v("1")]),t._v("上处理机")]),t._v(" "),a("p",[t._v("7时刻（P"),a("sub",[t._v("1")]),t._v("完成）：就绪队列中有P"),a("sub",[t._v("2")]),t._v("(响应比 = (7-2+4) / 4 = 2.25)、P"),a("sub",[t._v("3")]),t._v("(响应比 = (7-4+1) / 1 = 4)、P"),a("sub",[t._v("4")]),t._v("(响应比 = (7-5+4) / 4 = 1.5)")]),t._v(" "),a("p",[t._v("8时刻（P"),a("sub",[t._v("3")]),t._v("完成）：P"),a("sub",[t._v("2")]),t._v("(响应比 = (8-2+4) / 4 = 2.5)、P"),a("sub",[t._v("4")]),t._v("(响应比 = (8-5+4) / 4 = 1.75)")]),t._v(" "),a("p",[t._v("12时刻（P"),a("sub",[t._v("2")]),t._v("完成）：就绪队列只剩下P"),a("sub",[t._v("4")])]),t._v(" "),a("p",[t._v("16时刻（P"),a("sub",[t._v("4")]),t._v("完成）")]),t._v(" "),a("p",[t._v("周转时间 = 完成时间 - 到达时间")]),t._v(" "),a("p",[t._v("P1 = 7 - 0 = 7")]),t._v(" "),a("p",[t._v("P2 = 12 - 2 = 10")]),t._v(" "),a("p",[t._v("P3 = 8 - 4 = 4")]),t._v(" "),a("p",[t._v("P4 = 16 - 5 = 11")]),t._v(" "),a("p",[t._v("带权周转时间 = 周转时间 / 运行时间")]),t._v(" "),a("p",[t._v("P1 = 7 / 7 = 1")]),t._v(" "),a("p",[t._v("P2 = 10 / 4 = 2.5")]),t._v(" "),a("p",[t._v("P3 = 4 / 1 = 4")]),t._v(" "),a("p",[t._v("P4 = 11 / 4 = 2.75")]),t._v(" "),a("p",[t._v("等待时间 = 周转时间 - 运行时间")]),t._v(" "),a("p",[t._v("P1 = 7 - 7 = 0")]),t._v(" "),a("p",[t._v("P2 = 10 - 4 = 6")]),t._v(" "),a("p",[t._v("P3 = 4 - 1 = 3")]),t._v(" "),a("p",[t._v("P4 = 11 - 4 = 7")]),t._v(" "),a("p",[t._v("平均周转时间 = (7 + 10 + 4 +11) / 4 = 8")]),t._v(" "),a("p",[t._v("平均带权周转时间 = (1 + 2.5 + 4 + 2.75) / 4 = 2.56")]),t._v(" "),a("p",[t._v("平均等待时间 = (0 + 6 + 3 +7) / 4 = 4")]),t._v(" "),a("h4",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[t._v("这几种算法主要关心对用户的公平性、平均周转时间、平均等待时间等评价系统整体性能等指标，但是不关心“响应时间”，也并不区分任务的紧急程度，因此对于用户来说，交互性很糟糕。因此这三种算法一般适合用于早期的批处理系统，当然，FCFS算法也常结合其他的算法使用，现在也扮演着很重要的角色。")]),t._v(" "),a("h3",{attrs:{id:"调度算法-时间片轮转、优先级、多级反馈队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#调度算法-时间片轮转、优先级、多级反馈队列"}},[t._v("#")]),t._v(" 调度算法（时间片轮转、优先级、多级反馈队列）")]),t._v(" "),a("h4",{attrs:{id:"时间片轮转-rr-round-robin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#时间片轮转-rr-round-robin"}},[t._v("#")]),t._v(" 时间片轮转（RR，Round-Robin）")]),t._v(" "),a("h5",{attrs:{id:"算法思想-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法思想-4"}},[t._v("#")]),t._v(" 算法思想")]),t._v(" "),a("p",[t._v("公平的、轮流的为各个进程服务，让每个进程在一定时间间隔内都可以得到响应")]),t._v(" "),a("h5",{attrs:{id:"算法规则-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法规则-4"}},[t._v("#")]),t._v(" 算法规则")]),t._v(" "),a("p",[t._v("按照各进程到达就绪队列的顺序，轮流让各个进程执行一个时间片（如100ms）。若进程未在一个时间片内执行完，则剥夺处理机，将进程重新放到就绪队列队尾重新排队")]),t._v(" "),a("h5",{attrs:{id:"用于作业-进程调度-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用于作业-进程调度-4"}},[t._v("#")]),t._v(" 用于作业/进程调度")]),t._v(" "),a("p",[t._v("用于进程调度（只有作业放入内存建立了相应的进程后，才能被分配处理机时间片）")]),t._v(" "),a("h5",{attrs:{id:"是否可抢占-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#是否可抢占-4"}},[t._v("#")]),t._v(" 是否可抢占？")]),t._v(" "),a("p",[t._v("若进程未能在时间片内运行完，将被强行剥夺处理机使用权，因此时间片轮转调度算法属于抢占式的算法。由时钟装置发出时钟中断来通知CPU时间片已到")]),t._v(" "),a("h5",{attrs:{id:"优缺点-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优缺点-4"}},[t._v("#")]),t._v(" 优缺点")]),t._v(" "),a("p",[t._v("优点：公平，相应快，适用于分时操作系统。")]),t._v(" "),a("p",[t._v("缺点：由于高频率的进程切换，因此有一定开销不区分任务的紧急程度。")]),t._v(" "),a("h5",{attrs:{id:"是否会导致饥饿-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#是否会导致饥饿-4"}},[t._v("#")]),t._v(" 是否会导致饥饿")]),t._v(" "),a("p",[t._v("不会")]),t._v(" "),a("p",[t._v("例：")]),t._v(" "),a("p",[t._v("各进程到达就绪队列的时间、需要的运行时间如下表所示。使用时间片调度算法，分析时间片大小分别为2、5时的进程运行情况。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("进程")]),t._v(" "),a("th",[t._v("到达时间")]),t._v(" "),a("th",[t._v("运行时间")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("P1")]),t._v(" "),a("td",[t._v("0")]),t._v(" "),a("td",[t._v("5")])]),t._v(" "),a("tr",[a("td",[t._v("P2")]),t._v(" "),a("td",[t._v("2")]),t._v(" "),a("td",[t._v("4")])]),t._v(" "),a("tr",[a("td",[t._v("P3")]),t._v(" "),a("td",[t._v("4")]),t._v(" "),a("td",[t._v("1")])]),t._v(" "),a("tr",[a("td",[t._v("P4")]),t._v(" "),a("td",[t._v("5")]),t._v(" "),a("td",[t._v("6")])])])]),t._v(" "),a("p",[t._v("常用于分时操作系统，更注重“响应时间”")]),t._v(" "),a("p",[t._v("时间片轮转调度算法：轮流让就绪队列中的进程依次执行一个时间片（每次选择的都是排在就绪队列对头的进程）")]),t._v(" "),a("p",[t._v("时间片大小为2（注：以下括号内表示当前时刻就绪队列中的进程、进程的剩余运行时间）")]),t._v(" "),a("p",[t._v("0时刻（P1(5)）：0时刻只有P1到达就绪队列，让P1上处理机运行一个时间片")]),t._v(" "),a("p",[t._v("2时刻（P2(4) → P1(3)）：2时刻P2到达就绪队列，P1运行完一个时间片，被剥夺处理机，重新放到队尾。此时P2排在队头，因此让P2上处理机。（注意：2时刻，P1下处理机，同一时刻新进程P2到达，如果在题目中遇到这种情况，默认新到达的进程先进入就绪队列）")]),t._v(" "),a("p",[t._v("4时刻（P1(3) → P3(1) → P2(2)）：4时刻，P3到达，先插到就绪队尾，紧接着，P2下处理机也插到队尾")]),t._v(" "),a("p",[t._v("5时刻（P3(1) → P2(2) → P4(6)）：5时刻，P4到达插到就绪队尾（注意：由于P1的时间片还没用完，因此暂时不调度。另外此时P1处于运行态，并不在就绪队列中）")]),t._v(" "),a("p",[t._v("6时刻（P3(1) → P2(2) → P4(6) → P1(1)）：6时刻，P1时间片用完，下处理机，重新放回就绪队列，发生调度")]),t._v(" "),a("p",[t._v("7时刻（P2(2) → P4(6) → P1(1)）：虽然P3时间片没用完，但是由于P3只需运行一个单位时间片，运行完了会主动放弃处理机，因此也会发生调度。队头进程P2上处理机。")]),t._v(" "),a("p",[t._v("9时刻（P4(6) → P1(1)）：进程P2时间片用完，并刚好运行完，发生调度，P4上处理机")]),t._v(" "),a("p",[t._v("11时刻（P1(1) → P4(4)）：P4时间片用完，重新回到就绪队列，P1上处理机")]),t._v(" "),a("p",[t._v("12时刻（P4(4)）：P1运行完，主动放弃处理机，此时就绪队列只剩P4，P4上处理机")]),t._v(" "),a("p",[t._v("14时刻（）：就绪队列为空，因此让P4接着运行一个时间片")]),t._v(" "),a("p",[t._v("16时刻（）：所有进程运行结束")]),t._v(" "),a("blockquote",[a("p",[t._v("如果时间片太大，使得每个进程都可以在一个时间片内完成，则时间片轮转调度算法退化为先来先服务算法，并且会增大进程响应时间。因此时间片不能太大。")]),t._v(" "),a("p",[t._v("另一方面，进程调度、切换是有时间代价的（保存、恢复运行环境），因此如果时间片太小，会导致进程切换过于频繁，系统会花大量的时间来处理进程切换，从而导致实际用于进程执行的时间比例减少。可见时间片也不能太小。")]),t._v(" "),a("p",[t._v("一般来说，设计时间片时要让切换进程的开销占比不超过1%")])]),t._v(" "),a("h4",{attrs:{id:"优先级调度算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优先级调度算法"}},[t._v("#")]),t._v(" 优先级调度算法")]),t._v(" "),a("h5",{attrs:{id:"算法思想-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法思想-5"}},[t._v("#")]),t._v(" 算法思想")]),t._v(" "),a("p",[t._v("随着计算机的发展，特别是实时操作系统的出现，越来越多的应用场景需要根据任务的紧急程度来决定处理顺序")]),t._v(" "),a("h5",{attrs:{id:"算法规则-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法规则-5"}},[t._v("#")]),t._v(" 算法规则")]),t._v(" "),a("p",[t._v("每个作业/进程有各自的优先级，调度时选择优先级最高的作业/进程")]),t._v(" "),a("h5",{attrs:{id:"用于作业-进程调度-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用于作业-进程调度-5"}},[t._v("#")]),t._v(" 用于作业/进程调度")]),t._v(" "),a("p",[t._v("既可以用于作业调度，也可用于进程调度。甚至，还会用于在之后学习的I/O调度中")]),t._v(" "),a("h5",{attrs:{id:"是否可抢占-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#是否可抢占-5"}},[t._v("#")]),t._v(" 是否可抢占？")]),t._v(" "),a("p",[t._v("抢占式、非抢占式都有。非抢占式只需在进程主动放弃处理机时进行调度即可，而抢占式还需在就绪队列变化时，检查是否会发生抢占")]),t._v(" "),a("h5",{attrs:{id:"优缺点-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优缺点-5"}},[t._v("#")]),t._v(" 优缺点")]),t._v(" "),a("p",[t._v("优点：用优先级区分积极程度、重要程度，适用于分时操作系统。可灵活的调整各种作业/进程的偏好程度")]),t._v(" "),a("p",[t._v("缺点：若源源不断的有高优先级进程到来，则可能导致饥饿")]),t._v(" "),a("h5",{attrs:{id:"是否会导致饥饿-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#是否会导致饥饿-5"}},[t._v("#")]),t._v(" 是否会导致饥饿")]),t._v(" "),a("p",[t._v("会")]),t._v(" "),a("p",[t._v("例：")]),t._v(" "),a("p",[t._v("各进程到达就绪队列的时间、需要的运行时间、进程优先数如下表所示。使用抢占式的优先级调度算法，分析进程运行情况。（注：优先数越大，优先级越高）")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("进程")]),t._v(" "),a("th",[t._v("到达时间")]),t._v(" "),a("th",[t._v("运行时间")]),t._v(" "),a("th",[t._v("优先数")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("P1")]),t._v(" "),a("td",[t._v("0")]),t._v(" "),a("td",[t._v("7")]),t._v(" "),a("td",[t._v("1")])]),t._v(" "),a("tr",[a("td",[t._v("P2")]),t._v(" "),a("td",[t._v("2")]),t._v(" "),a("td",[t._v("4")]),t._v(" "),a("td",[t._v("2")])]),t._v(" "),a("tr",[a("td",[t._v("P3")]),t._v(" "),a("td",[t._v("4")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("3")])]),t._v(" "),a("tr",[a("td",[t._v("P4")]),t._v(" "),a("td",[t._v("5")]),t._v(" "),a("td",[t._v("4")]),t._v(" "),a("td",[t._v("2")])])])]),t._v(" "),a("p",[t._v("抢占式的优先级调度算法：每次调度时选择当前已到达且优先级最高的进程。当前进程主动放弃处理机时发生调度。另外，当就绪队列发生改变时也需要检查是否会发生抢占。")]),t._v(" "),a("p",[t._v("注：以下括号内表示当前处于就绪队列的进程")]),t._v(" "),a("p",[t._v("0时刻（P1(7)）：只有P1到达，P1上处理机")]),t._v(" "),a("p",[t._v("2时刻（P2(4)）：P2到达就绪队列，优先级比P1更高，发生抢占。P1回到就绪队列，P2上处理机")]),t._v(" "),a("p",[t._v("4时刻（P1(5)、P3(1)）：P3到达，优先级比P2更高，P3抢占处理机，P2回到就绪队列")]),t._v(" "),a("p",[t._v("5时刻（P1(5)、P2(2)、P4(4)）：P3完成，主动放弃处理机，同时P4到达，由于P2比P4先进入就绪队列，因此选择P2上处理机")]),t._v(" "),a("p",[t._v("7时刻（P1(5)、P4(4)）：P2完成，主动放弃处理机，P4优先级比P1更高，P4上处理机")]),t._v(" "),a("p",[t._v("11时刻（P1(5)）：P4完成，主动放弃处理机，就绪队列只剩P1，P1上处理机")]),t._v(" "),a("p",[t._v("16时刻（）：P1完成，此时所有进程运行完，就绪队列为空")]),t._v(" "),a("h5",{attrs:{id:"补充"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#补充"}},[t._v("#")]),t._v(" 补充")]),t._v(" "),a("p",[t._v("就绪队列未必只有一个，可以按照不同优先级来组织。另外，也可以把优先级高的进程排在更靠近队头的位置")]),t._v(" "),a("p",[t._v("根据优先级是否可以动态改变，可以将优先级分为静态优先级和动态优先级两种。")]),t._v(" "),a("p",[t._v("静态优先级：创建进程时确定，之后一直不变。")]),t._v(" "),a("p",[t._v("动态优先级：创建进程时有一个初始值，之后会根据情况动态的调整优先级")]),t._v(" "),a("p",[t._v("通常：")]),t._v(" "),a("p",[t._v("系统进程优先级高于用户进程")]),t._v(" "),a("p",[t._v("前台进程优先级高于后台进程")]),t._v(" "),a("p",[t._v("操作系统更偏好I/O型进程（或称I/O繁忙型进程）")]),t._v(" "),a("p",[t._v("注：与I/O型进程相对的是计算型进程（或称CPU繁忙型进程）")]),t._v(" "),a("p",[t._v("可以从追求公平、提升资源利用率等角度考虑")]),t._v(" "),a("p",[t._v("如果某进程在就绪队列中等待了很长时间，则可以适当提升其优先级")]),t._v(" "),a("p",[t._v("如果某进程占用处理机运行了很长时间，则可适当降低其优先级")]),t._v(" "),a("p",[t._v("如果发现一个进程频繁的进行I/O操作，则可适当提升其优先级")]),t._v(" "),a("h4",{attrs:{id:"多级反馈队列调度算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多级反馈队列调度算法"}},[t._v("#")]),t._v(" 多级反馈队列调度算法")]),t._v(" "),a("h5",{attrs:{id:"算法思想-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法思想-6"}},[t._v("#")]),t._v(" 算法思想")]),t._v(" "),a("p",[t._v("对其他调度算法的折中权衡")]),t._v(" "),a("h5",{attrs:{id:"算法规则-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法规则-6"}},[t._v("#")]),t._v(" 算法规则")]),t._v(" "),a("ol",[a("li",[t._v("设置多级就绪队列，各级队列优先级从高到低，时间片从小到大")]),t._v(" "),a("li",[t._v("新进程到达时先进入第一级队列，按FCFS原则排队等待被分配时间片，若用完时间片进程还未结束，则进程进入下一级队列队尾")]),t._v(" "),a("li",[t._v("只有第k级队列为空时，才会为k+1级队头的进程分配时间片")])]),t._v(" "),a("h5",{attrs:{id:"用于作业-进程调度-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用于作业-进程调度-6"}},[t._v("#")]),t._v(" 用于作业/进程调度")]),t._v(" "),a("p",[t._v("用于进程调度")]),t._v(" "),a("h5",{attrs:{id:"是否可抢占-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#是否可抢占-6"}},[t._v("#")]),t._v(" 是否可抢占？")]),t._v(" "),a("p",[t._v("抢占式。在k级队列的进程运行过程中，若更上级的队列（1～k-1级）中进入了一个新进程，则由于新进程处于优先级更高的队列中，因此新进程会抢占处理机，原来运行的进程放回k级队列队尾。")]),t._v(" "),a("h5",{attrs:{id:"优缺点-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优缺点-6"}},[t._v("#")]),t._v(" 优缺点")]),t._v(" "),a("ol",[a("li",[t._v("对各类型进程相对公平（FCFS的优点）；")]),t._v(" "),a("li",[t._v("每个新到达的进程都可以很快就得到响应（RR的优点）；")]),t._v(" "),a("li",[t._v("短进程只用较少的时间就可完成（SPF的优点）；")]),t._v(" "),a("li",[t._v("不必实现估计进程的运行时间（避免用户作假）；")]),t._v(" "),a("li",[t._v("可灵活的调整对各类进程的偏好程度，比如CPU密集型进程、I/O密集型进程（拓展：可将因I/O阻塞的进程重新放回原队列，这样I/O进程就可以保持较高优先级）")])]),t._v(" "),a("h5",{attrs:{id:"是否会导致饥饿-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#是否会导致饥饿-6"}},[t._v("#")]),t._v(" 是否会导致饥饿")]),t._v(" "),a("p",[t._v("会")]),t._v(" "),a("p",[t._v("例：")]),t._v(" "),a("p",[t._v("各进程到达就绪队列的时间、需要的运行时间、进程优先数如下表所示。使用抢占式的优先级调度算法，分析进程运行情况。（注：优先数越大，优先级越高）")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("进程")]),t._v(" "),a("th",[t._v("到达时间")]),t._v(" "),a("th",[t._v("运行时间")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("P1")]),t._v(" "),a("td",[t._v("0")]),t._v(" "),a("td",[t._v("8")])]),t._v(" "),a("tr",[a("td",[t._v("P2")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("4")])]),t._v(" "),a("tr",[a("td",[t._v("P3")]),t._v(" "),a("td",[t._v("5")]),t._v(" "),a("td",[t._v("1")])])])]),t._v(" "),a("p",[t._v("设置多级就绪队列，各级队列优先级从高到低，时间片从小到大")]),t._v(" "),a("p",[t._v("新进程到达时先进入第1级队列，按FCFS原则排队等待被分配时间片。若用完时间片进程还未结束，则进程进入下一级队列队尾。如果此时已经在最下级的队列，则重新放回最下级队列队尾")]),t._v(" "),a("p",[t._v("只有第k级队列为空时，才会为k+1级队列队头的进程分配时间片")]),t._v(" "),a("p",[t._v("被抢占处理机的进程重新放回原队列")]),t._v(" "),a("p",[t._v("0时刻：P1进入第一级队列，上处理机")]),t._v(" "),a("p",[t._v("第一级就绪队列（时间片1）：P1(8)")]),t._v(" "),a("p",[t._v("第二级就绪队列（时间片2）：空")]),t._v(" "),a("p",[t._v("第三级就绪队列（时间片4）：空")]),t._v(" "),a("p",[t._v("1时刻：P2进入第一级队列，P1时间片用完进入第二级队列队尾，第一级队列P2上处理机")]),t._v(" "),a("p",[t._v("第一级就绪队列（时间片1）：P2(4)")]),t._v(" "),a("p",[t._v("第二级就绪队列（时间片2）：P1(7)")]),t._v(" "),a("p",[t._v("第三级就绪队列（时间片4）：空")]),t._v(" "),a("p",[t._v("2时刻：P2时间片用完进入第二级队列队尾，第一级队列为空，第二队列P1在队头先上处理机")]),t._v(" "),a("p",[t._v("第一级就绪队列（时间片1）：空")]),t._v(" "),a("p",[t._v("第二级就绪队列（时间片2）：P1(7) → P2(3)")]),t._v(" "),a("p",[t._v("第三级就绪队列（时间片4）：空")]),t._v(" "),a("p",[t._v("4时刻：P1时间片用完进入第三级队列队尾，第一级队列为空，第二队列P2上处理机")]),t._v(" "),a("p",[t._v("第一级就绪队列（时间片1）：空")]),t._v(" "),a("p",[t._v("第二级就绪队列（时间片2）：P2(3)")]),t._v(" "),a("p",[t._v("第三级就绪队列（时间片4）：P1(5)")]),t._v(" "),a("p",[t._v("5时刻：P3进入第一级队列，抢占处理机，P2重新进入第二级队列队尾，第一级队列P3上处理机")]),t._v(" "),a("p",[t._v("第一级就绪队列（时间片1）：P3(1)")]),t._v(" "),a("p",[t._v("第二级就绪队列（时间片2）：P2(2)")]),t._v(" "),a("p",[t._v("第三级就绪队列（时间片4）：P1(5)")]),t._v(" "),a("p",[t._v("6时刻：P3完成，主动放弃处理机，第一级队列为空，第二队列只剩P2，P2上处理机")]),t._v(" "),a("p",[t._v("第一级就绪队列（时间片1）：空")]),t._v(" "),a("p",[t._v("第二级就绪队列（时间片2）：P2(2)")]),t._v(" "),a("p",[t._v("第三级就绪队列（时间片4）：P1(5)")]),t._v(" "),a("p",[t._v("8时刻：P2完成，主动放弃处理机，第一级队列为空，第二队列为空，第三队列只剩P1，P1上处理机")]),t._v(" "),a("p",[t._v("第一级就绪队列（时间片1）：空")]),t._v(" "),a("p",[t._v("第二级就绪队列（时间片2）：空")]),t._v(" "),a("p",[t._v("第三级就绪队列（时间片4）：P1(5)")]),t._v(" "),a("p",[t._v("12时刻：P1时间片用完，重新放回第三级队列，此时整个队列只剩P1，P1上处理机")]),t._v(" "),a("p",[t._v("第一级就绪队列（时间片1）：空")]),t._v(" "),a("p",[t._v("第二级就绪队列（时间片2）：空")]),t._v(" "),a("p",[t._v("第三级就绪队列（时间片4）：P1(1)")]),t._v(" "),a("p",[t._v("13时刻：P1完成，整个程序完成")]),t._v(" "),a("p",[t._v("第一级就绪队列（时间片1）：空")]),t._v(" "),a("p",[t._v("第二级就绪队列（时间片2）：空")]),t._v(" "),a("p",[t._v("第三级就绪队列（时间片4）：空")]),t._v(" "),a("h5",{attrs:{id:"总结-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结-2"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[t._v("比起早期的批处理操作系统来说，由于计算机造价大幅降低，因此之后出现的交互式操作系统（包括分时操作系统、实时操作系统等）更注重系统等响应时间、公平性、平衡性等指标。而这几种算法恰好也能较好的满足交互式系统的需要。因此这三种算法适合用于交互式系统。（比如UNIX使用的就是多级反馈队列调度算法）")]),t._v(" "),a("h3",{attrs:{id:"进程同步与互斥"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程同步与互斥"}},[t._v("#")]),t._v(" 进程同步与互斥")]),t._v(" "),a("h4",{attrs:{id:"什么是进程同步"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是进程同步"}},[t._v("#")]),t._v(" 什么是进程同步")]),t._v(" "),a("p",[t._v("读进程和写进程并发的运行，由于并发必然导致异步性，因此“写数据”和“读数据”两个操作执行的先后顺序是不确定的。而实际应用中，又必须按照“写数据 → 读数据“的顺序来执行，如何解决这种异步问题，就是“进程同步”所讨论的内容。")]),t._v(" "),a("p",[t._v("同步亦称直接制约关系，它是指为完成某种任务而建立的两个或多个进程，这些进程因为需要在某些位置上协调它们的工作次序而产生的制约关系。进程间的直接制约关系就是源于他们之间的相互合作。")]),t._v(" "),a("h4",{attrs:{id:"什么是进程互斥"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是进程互斥"}},[t._v("#")]),t._v(" 什么是进程互斥")]),t._v(" "),a("p",[t._v("我们把一个时间内只允许一个进程使用的资源称为临界资源。许多物理设备（比如摄像头、打印机）都属于临界资源。此外还有许多变量、数据、内存缓冲区等都属于临界资源。")]),t._v(" "),a("p",[t._v("对临界资源的访问，必须互斥的进行。互斥，亦称简介制约关系。进程互斥指当一个进程访问某临界资源时，另一个想要访问该临界资源的进程必须等待。当前访问临界资源的进程访问结束后，释放该资源之后，另一个进程才能去访问临界资源。")]),t._v(" "),a("p",[t._v("对临界资源的互斥访问，可以在逻辑上分为如下四个部分：")]),t._v(" "),a("h5",{attrs:{id:"进入区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进入区"}},[t._v("#")]),t._v(" 进入区")]),t._v(" "),a("p",[t._v("负责检查是否可以进入临界区，若可进入，则应设置正在访问临界资源的标志（可理解为“上锁”），以阻止其他进程同时进入临界区。")]),t._v(" "),a("h5",{attrs:{id:"临界区-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#临界区-3"}},[t._v("#")]),t._v(" 临界区")]),t._v(" "),a("p",[t._v("访问临界资源的那段代码")]),t._v(" "),a("h5",{attrs:{id:"退出区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#退出区"}},[t._v("#")]),t._v(" 退出区")]),t._v(" "),a("p",[t._v("负责解除正在访问临界资源的标示（可理解为“解锁”）")]),t._v(" "),a("h5",{attrs:{id:"剩余区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#剩余区"}},[t._v("#")]),t._v(" 剩余区")]),t._v(" "),a("p",[t._v("做其他处理")]),t._v(" "),a("p",[t._v("注意：")]),t._v(" "),a("p",[t._v("临界区时进程中访问临界资源的代码段。")]),t._v(" "),a("p",[t._v("进入区和退出区时负责实现互斥的代码段。")]),t._v(" "),a("p",[t._v("临界区也可称为“临界段”。")]),t._v(" "),a("p",[t._v("为了实现对临界资源的互斥访问，同时保证系统整体性能，需要遵循以下原则：")]),t._v(" "),a("ol",[a("li",[t._v("空闲让进。临界区空闲时，可以允许一个请求进入临界区的进程立即进入临界区；")]),t._v(" "),a("li",[t._v("忙则等待。当已有进程进入临界区时，其他试图进入临界区的进程必须等待；")]),t._v(" "),a("li",[t._v("有限等待。对请求访问的进程，应保证能在有限时间内进入临界区（保证不会饥饿）；")]),t._v(" "),a("li",[t._v("让权等待。当进程不能进入临界区时，应立即释放处理，防止进程忙等待。")])]),t._v(" "),a("h3",{attrs:{id:"进程互斥的软件实现方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程互斥的软件实现方法"}},[t._v("#")]),t._v(" 进程互斥的软件实现方法")]),t._v(" "),a("h4",{attrs:{id:"单标志法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单标志法"}},[t._v("#")]),t._v(" 单标志法")]),t._v(" "),a("p",[t._v("算法思想：")]),t._v(" "),a("p",[t._v("两个进程在访问完临界区后会把使用临界区的权限转交给另一个进程，也就是说每个进程进入临界区的权限只能被另一个进程赋予。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" turn "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// turn 表示当前允许进入临界区的进程号")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// P0进程")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("turn "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1⃣️ 进入区")]),t._v("\ncritical section"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2⃣️ 临界区")]),t._v("\nturn "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3⃣️ 退出区")]),t._v("\nremainder section"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4⃣️ 剩余区")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// P1进程")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("turn "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 5⃣️ 进入区")]),t._v("\ncritical section"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 6⃣️ 临界区")]),t._v("\nturn "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 7⃣️ 退出区")]),t._v("\nremainder section"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 8⃣️ 剩余区")]),t._v("\n")])])]),a("p",[t._v("turn的初始值为0，即刚开始只允许0号进程进入临界区。")]),t._v(" "),a("p",[t._v("若P1先上处理机，则会一直卡在5⃣️。直到P1的时间片用完，发生调度，切换P0上处理机运行。代码1⃣️不会卡住P0，P0可以正常访问临界区，在P0访问临界区期间即时切换回P1，P1依然会卡在5⃣️。只有P0在退出区将turn改为1后，P1才能进入临界区。")]),t._v(" "),a("p",[t._v("因此，该算法可以实现“同一时刻最多允许一个进程访问临界区”")]),t._v(" "),a("p",[t._v("turn表示当前允许进入临界区的进程号，而只有当前允许进入临界区的进程在访问了临界区之后，才会修改turn的值。也就是说，对于临界区的访问，一定是按P0 → P1 → P0 → P1 → ...  这样轮流访问。")]),t._v(" "),a("p",[t._v("这种“轮流访问”带来的问题是，如果允许进入临界区的进程是P0，而P0一直不访问临界区，那么虽然此时临界区空闲，但是并不允许P1访问。")]),t._v(" "),a("p",[t._v("因此，单标志法存在的主要问题是：违背“空闲让进”原则。")]),t._v(" "),a("h4",{attrs:{id:"双标志先检查法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#双标志先检查法"}},[t._v("#")]),t._v(" 双标志先检查法")]),t._v(" "),a("p",[t._v("算法思想：设置一个布尔型数组flag[]，数组中各个元素用来标记各进程想进入临界区的意愿，比如“flag[0] = true”意味着0号进程P0现在想要进入临界区。每个进程在进入临界区之前先检查当前有没有别的进程想进入临界区，如果没有，则把自身对应的标示flag[i]设为true，之后开始访问临界区。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("bool flag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 表示进入临界区意愿的数组")]),t._v("\nflag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" false"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nflag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" false"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 刚开始设置为两个进程都不想进入临界区")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// P0进程")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("flag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1⃣️")]),t._v("\nflag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" true"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2⃣️ ")]),t._v("\ncritical section"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3⃣️ ")]),t._v("\nflag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" false"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4⃣️ ")]),t._v("\nremainder section"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// P1进程")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("flag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 5⃣️ 如果此时P0想进入临界区，P1就一直循环等待")]),t._v("\nflag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" true"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 6⃣️ 标记为P1进程想要进入临界区")]),t._v("\ncritical section"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 7⃣️ 访问临界区")]),t._v("\nflag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" false"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 8⃣️ 访问完临界区，修改标记为P1不想使用临界区\t")]),t._v("\nremainder section"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n")])])]),a("p",[t._v("若按照1⃣️5⃣️2⃣️6⃣️3⃣️7⃣️...的顺序执行，P0和P1将会同时访问临界区。")]),t._v(" "),a("p",[t._v("因此，双标志先检查法的主要问题是：违反“忙则等待”原则。")]),t._v(" "),a("p",[t._v("原因在于，进入区的“检查”和“上锁”两个处理不是一气呵成的。“检查”后，“上锁”前可能发生进程切换。")]),t._v(" "),a("h4",{attrs:{id:"双标志后检查法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#双标志后检查法"}},[t._v("#")]),t._v(" 双标志后检查法")]),t._v(" "),a("p",[t._v("算法思想：双标志先检查法的改版。前一个算法的问题是先“检查”后“上锁”，但是这两个操作又无法一气呵成，因此导致了两个进程同时进入临界区的问题。因此，人们又想到先“上锁”后“检查”的方法，来避免上述问题。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("bool flag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 表示进入临界区意愿的数组")]),t._v("\nflag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" false"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nflag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" false"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 刚开始设置为两个进程都不想进入临界区")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// P0进程")]),t._v("\nflag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" true"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1⃣️")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("flag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2⃣️ ")]),t._v("\ncritical section"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3⃣️ ")]),t._v("\nflag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" false"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4⃣️ ")]),t._v("\nremainder section"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// P1进程")]),t._v("\nflag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" true"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 5⃣️ 标记为P1进程想要进入临界区")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("flag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 6⃣️ 如果P0也想进入临界区，则P1循环等待")]),t._v("\ncritical section"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 7⃣️ 访问临界区")]),t._v("\nflag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" false"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 8⃣️ 访问完临界区，修改标记为P1不想使用临界区\t")]),t._v("\nremainder section"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n")])])]),a("p",[t._v("若按照1⃣️5⃣️2⃣️6⃣️...的顺序执行，P0和P1将都无法进入临界区。")]),t._v(" "),a("p",[t._v("因此，双标志后检查法虽然解决了“忙则等待”的问题，但是又违背了“空闲让进”和“有限等待”原则。")]),t._v(" "),a("p",[t._v("会因各进程都长期无法访问临界资源而产生“饥饿”现象。")]),t._v(" "),a("h4",{attrs:{id:"peterson算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#peterson算法"}},[t._v("#")]),t._v(" Peterson算法")]),t._v(" "),a("p",[t._v("算法思想：双标志后检查法中，两个进程都争着进入临界区，但是谁也不让谁，最后谁都无法进入临界区。Gary L. Peterson想到了一种方法，如果双方都争着想进入临界区，那可以让进程尝试“孔融让梨”，主动让对方先使用临界区。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("bool flag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 表示进入临界区意愿的数组")]),t._v("\nflag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" false"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nflag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" false"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 刚开始设置为两个进程都不想进入临界区")]),t._v("\nturn "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// P0进程")]),t._v("\nflag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" true"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1⃣️")]),t._v("\nturn "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2⃣️ ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("flag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" turn"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3⃣️ ")]),t._v("\ncritical section"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4⃣️ ")]),t._v("\nflag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" false"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 5⃣️")]),t._v("\nremainder section"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// P1进程")]),t._v("\nflag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" true"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 6⃣️ 表示自己想进入临界区")]),t._v("\nturn "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 7⃣️ 可以优先让对方进入临界区")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("flag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" turn"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 8⃣️ 对方想进，且最后一次自己“让梨”，那自己就循环等待")]),t._v("\ncritical section"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 9⃣️ ")]),t._v("\nflag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" false"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 🔟 访问完临界区，表示自己已经不想访问临界区了")]),t._v("\nremainder section"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n")])])]),a("p",[t._v("两种双标示法的问题都是由于进入区的几个操作不能一气呵成导致的。我们可以推理验证在Peterson算法中，两个进程进入区中的各种操作按不同的顺序穿插执行会发生什么情况：")]),t._v(" "),a("p",[t._v("1⃣️2⃣️3⃣️6⃣️7⃣️8⃣️...")]),t._v(" "),a("p",[t._v("1⃣️6⃣️2⃣️3⃣️...")]),t._v(" "),a("p",[t._v("Peterson算法用软件方法解决了进程互斥问题，遵循了空闲让进、忙则等待、有限等待三个原则，但是依然未遵循让权等待的原则。")]),t._v(" "),a("p",[t._v("Peterson算法相较于之前三种软件解决方案来说，是最好的，但依然不够好。")]),t._v(" "),a("h3",{attrs:{id:"进程互斥的硬件实现方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程互斥的硬件实现方法"}},[t._v("#")]),t._v(" 进程互斥的硬件实现方法")]),t._v(" "),a("h4",{attrs:{id:"中断屏蔽方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#中断屏蔽方法"}},[t._v("#")]),t._v(" 中断屏蔽方法")]),t._v(" "),a("p",[t._v("利用“开/关中断指令”实现（与原语的实现思想相同，即在某进程开始访问临界区到结束访问为止都不允许被中断，也就不能发生进程切换，因此也不可能发生两个同时访问临界区的情况）")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n关中断"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n临界区"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n开中断"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])])]),a("p",[t._v("关中断后即不允许当前进程被中断，也必然不会发生进程切换")]),t._v(" "),a("p",[t._v("开中断，直到当前进程访问完临界区，再执行开中断指令，才能有可能有别的进程上处理机并访问临界区。")]),t._v(" "),a("p",[t._v("优点：简单、高效")]),t._v(" "),a("p",[t._v("缺点：不适用于多处理机；只适用于操作系统内核进程，不适用于用户进程（因为开/关中断指令只能运行在内核态，这组指令如果能让用户随意使用会很危险）")]),t._v(" "),a("h4",{attrs:{id:"testandset指令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#testandset指令"}},[t._v("#")]),t._v(" TestAndSet指令")]),t._v(" "),a("p",[t._v("简称TS指令，也有的地方称为TestAndSetLock指令，或TSL指令")]),t._v(" "),a("p",[t._v("TSL指令是用硬件实现的，执行的过程中不允许被中断，只能一气呵成。以下是用C语言描述的逻辑。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 布尔型共享变量lock表示当前临界区是否被加锁")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true表示已加锁，false表示未加锁")]),t._v("\nbool "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("TestAndSet")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bool "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("lock"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  bool old"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  old "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" lock"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// old用来存放lock原来的值")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("lock "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" true"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 无论之前是否已加锁，都将lock设为true")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" old"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回lock原来的值")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 以下是使用TSL指令实现互斥的算法逻辑")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("TestAndSet")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("lock"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// “上锁”并“检查”")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 临界区代码")]),t._v("\nlock "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" false"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// “解锁”")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 剩余区代码")]),t._v("\n")])])]),a("p",[t._v("若刚开始lock为false，则TSL返回的old值为false，while循环条件不满足，直接跳过循环，进入临界区。若刚开始lock为true，则执行TSL后old返回的值为true，while循环条件满足，会一直循环，直到当前访问临界区的进程在退出区进行“解锁”。")]),t._v(" "),a("p",[t._v("相比软件实现方法，TSL指令把“上锁”和“检查”操作用硬件的方式变成了一气呵成的原子操作。")]),t._v(" "),a("p",[t._v("优点：")]),t._v(" "),a("p",[t._v("实现简单，无需像软件那样严格检查是否会有逻辑漏洞；适用于多处理机环境；")]),t._v(" "),a("p",[t._v("缺点：")]),t._v(" "),a("p",[t._v("不满足“让权等待”原则，暂时无法进入临界区的进程会占用CPU并循环执行TSL指令，从而导致“忙等”。")]),t._v(" "),a("h4",{attrs:{id:"swap指令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#swap指令"}},[t._v("#")]),t._v(" Swap指令")]),t._v(" "),a("p",[t._v("有的地方也叫Exchange指令，或简称XCHG指令。")]),t._v(" "),a("p",[t._v("Swap指令是用硬件实现的，执行过程不允许被中断，只能一气呵成。以下是用C语言描述的逻辑。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Swap指令的作用是交换两个变量的值")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Swap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bool "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bool "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  bool temp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  temp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" temp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 以下是用Swap指令实现互斥的算法逻辑")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// lock表示当前临界区是否被加锁")]),t._v("\nbool old "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" true"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("old "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" true"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Swap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("lock"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("old"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 临界区代码")]),t._v("\nlock "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" false"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 剩余区代码")]),t._v("\n  \n")])])]),a("p",[t._v("逻辑上来看Swap和TSL并无太大区别，都是先记录下此时临界区是否已经上锁（记录在old变量上），再将上锁标记lock设置为true，最后检查old，如果old为false则说明之前没有别的进程对临界区上锁，则可跳出循环，进入临界区。")]),t._v(" "),a("p",[t._v("优点：")]),t._v(" "),a("p",[t._v("实现简单，无需像软件那样严格检查是否会有逻辑漏洞；适用于多处理机环境；")]),t._v(" "),a("p",[t._v("缺点：")]),t._v(" "),a("p",[t._v("不满足“让权等待”原则，暂时无法进入临界区的进程会占用CPU并循环执行TSL指令，从而导致“忙等”。")]),t._v(" "),a("h3",{attrs:{id:"信号量机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#信号量机制"}},[t._v("#")]),t._v(" 信号量机制")]),t._v(" "),a("p",[t._v("用户进程可以通过使用操作系统提供的一对原语来对信号量进行操作，从而很方便的实现了进程互斥、进程同步。")]),t._v(" "),a("p",[t._v("信号量其实就是一个变量（可以是一个整数，也可以是更复杂的记录型变量），可以用一个信号量来表示系统中某种资源的数量，比如：系统中只有一台打印机，就可以设置一个初始值为1的信号量。")]),t._v(" "),a("p",[t._v("原语是一种特殊的程序段，其执行只能一气呵成，不可被中断。原语是由关中断/开中断指令实现的。软件解决方案的主要问题是由“进入区的各种操作无法一气呵成”，因此如果能把进入区、退出区的操作都用“原语”实现，使这些操作能“一气呵成”就能避免问题。")]),t._v(" "),a("p",[t._v("wait、signal原语简称为P、V操作（来自荷兰语proberen和verhogen）。因此，做题的时候常把wait(S)、signal(S)两个操作分别写为P(S)、V(S)")]),t._v(" "),a("h4",{attrs:{id:"整型信号量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#整型信号量"}},[t._v("#")]),t._v(" 整型信号量")]),t._v(" "),a("p",[t._v("用一个整数型的变量作为信号量，用来表示系统中某种资源的数量。")]),t._v(" "),a("p",[t._v("与普通整数变量的区别：对信号量的操作只有三种，即初始化、P操作、V操作")]),t._v(" "),a("p",[t._v("例：")]),t._v(" "),a("p",[t._v("某计算机系统中有一台打印机。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" S "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 初始化整型信号量S，表示当前系统中可用的打印机资源数")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("wait")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" S"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// wait原语，相当于“进入区”")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("S "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果资源数不够，就一直循环等待")]),t._v("\n  S "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" S "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果资源数够，则占用一个资源")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("signal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" S"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// signal原语，相当于“退出区”")]),t._v("\n  S "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" S "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用完资源后，在退出区释放资源")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 进程P0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("wait")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("S"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 进入区，申请资源")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\t\t\t \t "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 临界区，访问资源")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("signal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("S"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 退出区，释放资源")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 进程P1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("wait")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("S"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 进入区，申请资源")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\t\t\t \t "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 临界区，访问资源")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("signal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("S"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 退出区，释放资源")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("“检查”和“上锁”一气呵成，避免了并发、异步导致的问题")]),t._v(" "),a("p",[t._v("存在的问题：不满足“让权等待”原则，会发生“忙等”")])]),t._v(" "),a("h4",{attrs:{id:"记录型信号量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#记录型信号量"}},[t._v("#")]),t._v(" 记录型信号量")]),t._v(" "),a("p",[t._v("整数信号量的缺陷是存在“忙等”问题，因此人们又提出了“记录型信号量”，即用记录型数据结构表表示的信号量。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 记录型信号量的定义")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 剩余资源数")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("process")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("L"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等待队列")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" semaphore"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 某进程需要使用资源时，通过wait原语申请")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("wait")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("semaphore S"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  S"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("S"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("block")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("S"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("L"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 进程使用完资源后，通过signal原语释放")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("signal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("semaphore S"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  S"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("S"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("wakeup")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("S"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("L"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("block原语：如果剩余资源数不够，使用block原语使进程从运行态进入阻塞态，并把挂到信号量S的等待队列（即阻塞队列）中。")]),t._v(" "),a("p",[t._v("wakeup原语：释放资源后，若还有别的进程在等待这种资源，则使用wakeup原语唤醒等待队列中的一个进程，该进程从阻塞态变为就绪态。")]),t._v(" "),a("p",[t._v("该机制遵循了“让权等待”原则，不会出现“忙等”现象。")])]),t._v(" "),a("h3",{attrs:{id:"信号量实现进程互斥、同步、前驱关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#信号量实现进程互斥、同步、前驱关系"}},[t._v("#")]),t._v(" 信号量实现进程互斥、同步、前驱关系")]),t._v(" "),a("h4",{attrs:{id:"信号量机制实现进程互斥"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#信号量机制实现进程互斥"}},[t._v("#")]),t._v(" 信号量机制实现进程互斥")]),t._v(" "),a("ol",[a("li",[t._v("分析并发进程的关键活动，划定临界区（如：对临界资源打印机的访问就应该放在临界区）")]),t._v(" "),a("li",[t._v("设置互斥信号量mutex，初始值为1")]),t._v(" "),a("li",[t._v("在临界区之前执行P(mutex)")]),t._v(" "),a("li",[t._v("在临界区之后执行V(mutex)")])]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 信号量实现互斥")]),t._v("\nsemaphore mutex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 初始化信号量")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("P1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mutex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用临界资源需要加锁")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 临界区代码段")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mutex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用临界资源后需要解锁")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("注意：")]),t._v(" "),a("p",[t._v("对不同的临界资源需要设置不同的互斥信号量。")]),t._v(" "),a("p",[t._v("P、V操作必须成对出现。缺少P(mutex)就不能保证临界资源的互斥访问。缺少V(mutex)会导致资源永不被释放，等待进程永不被唤醒。")]),t._v(" "),a("h4",{attrs:{id:"信号量机制实现进程同步"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#信号量机制实现进程同步"}},[t._v("#")]),t._v(" 信号量机制实现进程同步")]),t._v(" "),a("ol",[a("li",[t._v("分析什么地方需要实现“同步关系”，即必须保证“一前一后”执行的两个操作（或两句代码）")]),t._v(" "),a("li",[t._v("设置同步信号量S，初始化为0")]),t._v(" "),a("li",[t._v("在“前操作”之后执行V(S)")]),t._v(" "),a("li",[t._v("在“后操作”之前执行P(S)")])]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 信号量实现同步")]),t._v("\nsemaphore S "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 代码2必须在代码4之前执行")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("P1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  代码"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  代码"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("S"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  代码"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("P2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("S"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  代码"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  代码"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  代码"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("若先执行到V(S)操作，则S++后S=1。之后当执行到P(S)操作时，由于S=1，表示有可用资源，会执行S--，S的值变回0，P2进程不会执行block原语，而是会继续往下执行代码4。")]),t._v(" "),a("p",[t._v("若先执行到P(S)操作，由于S=0，S--后S=-1，表示此时没有可用资源，因此P操作中会执行block原语，主动请求阻塞。之后当执行完代码2，继而执行V(S)操作，S++，使S变回0，由于此时有进程在该信号量对应的阻塞队列中，因此会在V操作中执行wakeup原语，唤醒P2进程。这样P2就可以继续执行代码4了。")]),t._v(" "),a("h4",{attrs:{id:"信号量机制实现前驱关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#信号量机制实现前驱关系"}},[t._v("#")]),t._v(" 信号量机制实现前驱关系")]),t._v(" "),a("p",[t._v("进程P1中有句代码S1，P2中有句代码S2...P6中有句代码S6.这些代码要求按如下前驱图随时的顺序来执行。")]),t._v(" "),a("p",[t._v("​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tS1")]),t._v(" "),a("p",[t._v("​\t\t\t\t\t\t\t\t\t\t↓\t\t\t\t\t\t\t\t\t\t\t\t↓")]),t._v(" "),a("p",[t._v("​\t\t\t\t\t\t\t\t\t\tS2\t\t\t\t\t\t\t\t\t\t\tS3")]),t._v(" "),a("p",[t._v("​\t\t\t\t\t\t\t\t↓\t\t\t\t\t↓\t\t\t\t\t\t\t\t↓")]),t._v(" "),a("p",[t._v("​\t\t\t\t\t\t\t\tS4\t\t\t\tS5\t\t\t\t\t\t\t\tS6")]),t._v(" "),a("p",[t._v("​\t\t\t\t\t\t\t\t↓\t\t  \t\t ↓")]),t._v(" "),a("p",[t._v("​\t\t\t\t\t\t\t\tS6\t\t\t\tS6")]),t._v(" "),a("p",[t._v("其实每一对前驱关系都是一个进程同步的问题（需要保证一前一后的操作），因此：")]),t._v(" "),a("ol",[a("li",[t._v("要为每一对前驱关系关系各设置一个同步变量")]),t._v(" "),a("li",[t._v("在“前操作”之后对相应的同步变量执行V操作")]),t._v(" "),a("li",[t._v("在“后操作”之前对相应的同步变量执行P操作")])]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("semaphore a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("g"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" d "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" e "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" f "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" g "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("P1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n  S1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("P2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  S2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("P3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  S3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("g"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("P4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  S4"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("P5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  S5"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("P6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("g"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  S6"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"生产者-消费者问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#生产者-消费者问题"}},[t._v("#")]),t._v(" 生产者-消费者问题")]),t._v(" "),a("h4",{attrs:{id:"问题分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#问题分析"}},[t._v("#")]),t._v(" 问题分析")]),t._v(" "),a("p",[t._v("系统中有一组生产者进程和一组消费者进程，生产者进程每次生产一个产品放入缓冲区，消费者进程每次从缓冲区中取出一个产品并使用。（注：这里的“产品”理解为某种数据）")]),t._v(" "),a("p",[t._v("生产者、消费者共享一个初始为空、大小为n的缓冲区。")]),t._v(" "),a("p",[t._v("只有缓冲区没满时，生产者才能把产品放入缓冲区，否则必须等待。（同步关系。缓冲区满时，生产者要等待消费者取走产品）")]),t._v(" "),a("p",[t._v("只有缓冲区不空时，消费者才能从中取出产品，否则必须等待。（同步关系。缓冲区空时（即没有产品时）消费者需要等待生产者放入产品）")]),t._v(" "),a("p",[t._v("缓冲区是临界资源，各进程必须互斥的访问。")]),t._v(" "),a("p",[t._v("如何用信号量机制（P、V操作）实现生产者、消费者进程的这些功能呢？")]),t._v(" "),a("p",[t._v("信号量机制可实现互斥、同步、对一类系统资源的申请和释放。")]),t._v(" "),a("ul",[a("li",[t._v("设置初始值为1的互斥信号量（互斥）")]),t._v(" "),a("li",[t._v("设置初始值为0的同步信号量（实现“一前一后”）（同步）")]),t._v(" "),a("li",[t._v("设置一个信号量，初始值即为资源的数量（本质上也属于“同步问题”，若无空闲资源，则申请资源的进程需要等待别的进程释放资源后才能继续往下执行）")])]),t._v(" "),a("p",[t._v("生产者每次要消耗（P）一个空闲缓冲区，并生产（V）一个产品。")]),t._v(" "),a("p",[t._v("消费者每次要消耗（P）一个产品，并释放一个空闲缓冲区（V）。")]),t._v(" "),a("p",[t._v("往缓冲区放入/取走产品需要互斥。")]),t._v(" "),a("p",[t._v("PV操作题分析步骤：")]),t._v(" "),a("ol",[a("li",[t._v("关系分析。找出题目中描述的各个流程，分析它们之间的同步、互斥关系。")]),t._v(" "),a("li",[t._v("整理思路。根据各进程的操作流程确定P、V操作的大致顺序。")]),t._v(" "),a("li",[t._v("设置信号量。设置需要的信号量，并根据题目条件确定信号量初值。（互斥信号量初值一般为1，同步信号量的初值要看对应资源的初始值是多少）")])]),t._v(" "),a("h4",{attrs:{id:"如何实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何实现"}},[t._v("#")]),t._v(" 如何实现")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("semaphore mutex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 互斥信号量，实现对缓冲区的互斥访问")]),t._v("\nsemaphore empty "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 同步信号量，表示空闲缓冲区的数量")]),t._v("\nsemaphore full "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 同步信号量，表示产品的数量，也即非空缓冲区的数量")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("producer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 生产一个产品")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("empty"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mutex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 把产品放入缓冲区")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mutex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("full"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("consumer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("full"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mutex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从缓冲区取走一个产品")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mutex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("empty"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用产品")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("​")]),t._v(" "),a("h4",{attrs:{id:"思考-能够改变相邻p、v操作的顺序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#思考-能够改变相邻p、v操作的顺序"}},[t._v("#")]),t._v(" 思考：能够改变相邻P、V操作的顺序")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("producer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 生产一个产品")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mutex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1⃣️")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("empty"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2⃣️")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 把产品放入缓冲区")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mutex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("full"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("consumer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mutex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3⃣️")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("full"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4⃣️")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从缓冲区取走一个产品")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mutex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("empty"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用产品")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("若此时缓冲区内已经放满产品，则empty = 0， full = n。")]),t._v(" "),a("p",[t._v("则生产者进程执行1⃣️使mutex变为0，再执行2⃣️，由于已经没有空闲缓冲区，因此生产者被阻塞。")]),t._v(" "),a("p",[t._v("由于生产者阻塞，因此切换回消费者进程。消费者进程执行3⃣️，由于mutex为0，即生产者还没释放对临界资源的“锁”，因此消费者也被阻塞。")]),t._v(" "),a("p",[t._v("这就造成了生产者等待消费者释放空闲缓冲区，而消费者又等待生产者释放临界区的情况，生产者和消费者循环等待被对方唤醒，出现“死锁”。")]),t._v(" "),a("p",[t._v("同样的，若缓冲区中没有产品，即full = 0， empty = n。按3⃣️4⃣️1⃣️的顺序执行就会发生死锁。")]),t._v(" "),a("p",[t._v("因此，实现互斥的P操作一定要在实现同步的P操作之后。")]),t._v(" "),a("p",[t._v("V操作不会导致进程阻塞，因此两个V操作顺序可以交换。")]),t._v(" "),a("h3",{attrs:{id:"多生产者-多消费者问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多生产者-多消费者问题"}},[t._v("#")]),t._v(" 多生产者-多消费者问题")]),t._v(" "),a("h4",{attrs:{id:"问题分析-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#问题分析-2"}},[t._v("#")]),t._v(" 问题分析")]),t._v(" "),a("p",[t._v("桌子上有一只盘子，每次只能向其中放入一个水果。爸爸专向盘子中放苹果，妈妈专向盘子中放橘子，儿子专等吃盘子中的橘子，女儿专等着吃盘子中的苹果。只有盘子空时，爸爸或妈妈才可向盘子中放一个水果。仅当盘子中有自己需要的水果时，儿子或女儿才可以从盘子中取出水果。")]),t._v(" "),a("ol",[a("li",[t._v("关系分析。找出题目中描述的各个流程，分析它们之间的同步、互斥关系。")]),t._v(" "),a("li",[t._v("整理思路。根据各进程的操作流程确定P、V操作的大致顺序。")])]),t._v(" "),a("p",[t._v("互斥：在临界区前后分别P、V")]),t._v(" "),a("p",[t._v("同步：前V后P")]),t._v(" "),a("p",[t._v("互斥关系：")]),t._v(" "),a("p",[t._v("对缓冲区（盘子）的访问要互斥的进行")]),t._v(" "),a("p",[t._v("同步关系（一前一后）：")]),t._v(" "),a("ol",[a("li",[t._v("父亲将苹果放入盘子后，女儿才能取苹果")]),t._v(" "),a("li",[t._v("母亲将橘子放入盘子后，儿子才能取橘子")]),t._v(" "),a("li",[t._v("只有盘子为空时，父亲或母亲才能放入水果（“盘子为空“这个事件可以由儿子或女儿触发，事件发生后才允许父亲或母亲放水果）")])]),t._v(" "),a("h4",{attrs:{id:"如何实现-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何实现-2"}},[t._v("#")]),t._v(" 如何实现")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("semaphore mutex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 实现互斥访问盘子（缓冲区）")]),t._v("\nsemaphore apple "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 盘子中有几个苹果")]),t._v("\nsemaphore orange "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 盘子中有几个橘子")]),t._v("\nsemaphore plate "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 盘子中还可以放多少个水果")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("dad")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 准备一个苹果")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("plate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mutex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 把苹果放入盘子")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mutex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("apple"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mom")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 准备一个橘子")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("plate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mutex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 把橘子放入盘子")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mutex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("orange"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("daughter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("apple"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mutex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从盘中取出苹果")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mutex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("plate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 吃掉苹果")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("son")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("orange"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mutex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从盘中取出橘子")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mutex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("plate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 吃掉橘子")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("问题：可不可以去掉互斥信号量？")]),t._v(" "),a("p",[t._v("可以。")]),t._v(" "),a("h4",{attrs:{id:"总结-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结-3"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[t._v("在生产者-消费者问题中，如果缓冲区大小等于1，那么可能不需要设置互斥信号量就可以实现互斥访问缓冲区的功能。当然，这不是绝对的，要具体问题具体分析。如果缓冲区大于1，就必须专门设置一个互斥信号量mutex来保证互斥访问缓冲区。")]),t._v(" "),a("h3",{attrs:{id:"吸烟者问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#吸烟者问题"}},[t._v("#")]),t._v(" 吸烟者问题")]),t._v(" "),a("h4",{attrs:{id:"问题描述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#问题描述"}},[t._v("#")]),t._v(" 问题描述")]),t._v(" "),a("p",[t._v("假设一个系统有三个抽烟者进程和一个供应者进程。每个抽烟者不停的卷烟并抽掉它，但是要卷起并抽掉一支烟，抽烟者需要三种材料：烟草、纸和胶水。三个抽烟者中，第一个拥有烟草、第二个拥有纸条、第三个拥有胶水。供应者进程无限的提供三种材料，供应者每次将两种材料放桌子上，拥有剩下那两种材料的抽烟者卷一根烟并抽掉它，并给供应者进程一个信号告诉完成了，供应者就会放另外两种材料在桌上，这个过程一直重复（让三个抽烟者轮流的抽烟）。")]),t._v(" "),a("h4",{attrs:{id:"问题分析-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#问题分析-3"}},[t._v("#")]),t._v(" 问题分析")]),t._v(" "),a("p",[t._v("本质上这也属于“生产者-消费者”问题，更详细的说应该是“可生产多种产品的单生产者-多消费者”")]),t._v(" "),a("ol",[a("li",[t._v("关系分析。分析进程之间的同步、互斥关系。")]),t._v(" "),a("li",[t._v("整理思路。根据各进程的操作流程确定P、V操作的大致顺序。")]),t._v(" "),a("li",[t._v("设置信号量。设置需要的信号量，并根据题目条件确定信号量初值。（互斥信号量初值一般为1，同步信号量初值要看对应资源的初始值是多少）")])]),t._v(" "),a("p",[t._v("组合一：纸和胶水")]),t._v(" "),a("p",[t._v("组合二：烟草和胶水")]),t._v(" "),a("p",[t._v("组合三：烟草和纸")]),t._v(" "),a("p",[t._v("同步关系（从事件的角度来分析）")]),t._v(" "),a("p",[t._v("桌上有组合一 → 第一个抽烟者取走东西")]),t._v(" "),a("p",[t._v("桌上有组合二 → 第二个抽烟者取走东西")]),t._v(" "),a("p",[t._v("桌上有组合三 → 第三个抽烟者取走东西")]),t._v(" "),a("p",[t._v("发出完成信号 → 供应者将下一个组合放到桌上")]),t._v(" "),a("h4",{attrs:{id:"如何实现-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何实现-3"}},[t._v("#")]),t._v(" 如何实现")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("semaphore offer1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 桌上组合一的数量")]),t._v("\nsemaphore offer2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 桌上组合二的数量")]),t._v("\nsemaphore offer3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 桌上组合三的数量")]),t._v("\nsemaphore finish "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 抽烟是否完成 ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用于实现“三个抽烟者轮流抽烟”")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("provoder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将组合一放桌上")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("offer1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将组合二放桌上")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("offer2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将组合三放桌上")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("offer3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("finish"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("smoke1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("offer1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从桌上拿走组合一，卷烟，抽掉")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("finish"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("smoke2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("offer2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从桌上拿走组合二，卷烟，抽掉")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("finish"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("smoke3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("offer3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从桌上拿走组合三，卷烟，抽掉")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("finish"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"总结-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结-4"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[t._v("吸烟者问题可以为我们解决“可以生产多个产品的单生产者”问题提供一个思路。")]),t._v(" "),a("h3",{attrs:{id:"读者-写者问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#读者-写者问题"}},[t._v("#")]),t._v(" 读者-写者问题")]),t._v(" "),a("h4",{attrs:{id:"问题描述-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#问题描述-2"}},[t._v("#")]),t._v(" 问题描述")]),t._v(" "),a("p",[t._v("有读者和写者两组并发进程，共享一个文件，当两个或两个以上的读进程同时访问共享数据时不会产生副作用，但若某个写进程和其他进程（读进程或写进程）同时访问共享数据时则可能导致数据不一致的错误。因此要求：")]),t._v(" "),a("ol",[a("li",[t._v("允许多个读者可以同时对文件执行读操作")]),t._v(" "),a("li",[t._v("只允许一个写者往文件中写信息")]),t._v(" "),a("li",[t._v("任一写者在完成写操作之前不允许其他读者或写者工作")]),t._v(" "),a("li",[t._v("写者执行写操作前，应让已有的读者和写者全部退出")])]),t._v(" "),a("h4",{attrs:{id:"问题分析-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#问题分析-4"}},[t._v("#")]),t._v(" 问题分析")]),t._v(" "),a("ol",[a("li",[t._v("关系分析。找出并分析各个进程之间的同步、互斥关系。")]),t._v(" "),a("li",[t._v("整理思路。根据各进程的操作流程确定P、V操作的大致顺序。")]),t._v(" "),a("li",[t._v("设置信号量。设置需要的信号量，并根据题目条件确定信号量初值。（互斥信号量初值一般为1，同步信号量的初值要看对应资源的初始值是多少）")])]),t._v(" "),a("p",[t._v("两类进程：写进程、读进程")]),t._v(" "),a("p",[t._v("互斥关系：写进程 → 写进程、写进程 → 读进程。读进程与读进程不存在互斥问题。")]),t._v(" "),a("p",[t._v("写进程和任何进程都要互斥，设置一个互斥信号量rw，在写进程访问共享文件前后分别执行P、V操作。")]),t._v(" "),a("p",[t._v("读进程和写进程也要互斥，因此读即成访问共享文件前后也要对rw执行P、V操作。")]),t._v(" "),a("p",[t._v("如果所有读进程在访问共享文件之前都执行P(rw)操作，那么会导致各个进程之间也无法同时访问文件。")]),t._v(" "),a("p",[t._v("Key：读者写者问题的核心思想---怎么处理该问题呢？")]),t._v(" "),a("p",[t._v("P(rw)和V(rw)其实就是对共享文件的“加锁”和“解锁”。既然各个读进程需要同时访问，而读进程与写进程又必须互斥访问，那么我们可以让第一个访问文件的读进程“加锁”，让最后一个访问文件的读进程“解锁”。可以设置一个整数变量count来记录当前有几个读进程在访问文件。")]),t._v(" "),a("h4",{attrs:{id:"如何实现-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何实现-4"}},[t._v("#")]),t._v(" 如何实现")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("semaphore rw "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用于实现对文件的互斥访问。表示当前是否有进程在访问共享文件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" count "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 记录当前有几个读进程在访问文件")]),t._v("\nsemaphore mutex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用于保护对count变量的互斥访问")]),t._v("\nsemaphore w "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用于实现“写优先”")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("w"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rw"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 写之前“加锁”")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 写文件")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rw"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 写之后“解锁”")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("w"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reader")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("w"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mutex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 各读进程互斥访问count")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("count"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rw"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 第一个读进程负责“加锁”")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    count"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 访问文件的读进程+1")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mutex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("w"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 读文件")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("P")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mutex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    count"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 访问文件的读进程-1")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("count"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rw"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 最后一个读进程负责“解锁”")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mutex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("思考：")]),t._v(" "),a("p",[t._v("若两个读进程并发执行，则两个读进程有可能先后执行P(rw)，从而使第二个读进程阻塞的情况。")]),t._v(" "),a("p",[t._v("如何解决：")]),t._v(" "),a("p",[t._v("出现上述问题的原因在于对count变量的检查和赋值无法一气呵成，因此可以设置另一个互斥信号量mutex来保证各读进程对count的访问是互斥的。")]),t._v(" "),a("p",[t._v("潜在的问题：")]),t._v(" "),a("p",[t._v("只要有读进程还在读，写进程就要一直阻塞等待，可能“饿死”。因此，这种算法中，读进程是优先的。")]),t._v(" "),a("p",[t._v("通过新增互斥信号量w，来解决“饿死”现象。")]),t._v(" "),a("p",[t._v("分析以下并发执行P(w)的情况：")]),t._v(" "),a("p",[t._v("读者1 → 读者2")]),t._v(" "),a("p",[t._v("写者1 → 写者2")]),t._v(" "),a("p",[t._v("写者1 → 读者1")]),t._v(" "),a("p",[t._v("读者1 → 写者1 → 读者2")]),t._v(" "),a("p",[t._v("写者1 → 读者1 → 写者2")]),t._v(" "),a("p",[t._v("结论：")]),t._v(" "),a("p",[t._v("在这种算法中，连续")]),t._v(" "),a("h4",{attrs:{id:"总结-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结-5"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[t._v("读者-写者问题为我们解决复杂的互斥问题提供了一个参考思路。")]),t._v(" "),a("p",[t._v("其核心思想在于设置了一个计数器count用来记录当前正在访问共享文件的读进程数。我们可以用count的值来判断当前进入的进程是否是第一个/最后一个读进程，从而做出不同的处理。")]),t._v(" "),a("p",[t._v("另外，对count变量的检查和赋值不能一气呵成导致了一些错误，如果需要实现“一气呵成”，自然应该想到用互斥信号量。")]),t._v(" "),a("p",[t._v("最后，还要认真体会我们是如何解决“写进程饥饿”问题的。")]),t._v(" "),a("h3",{attrs:{id:"哲学家问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#哲学家问题"}},[t._v("#")]),t._v(" 哲学家问题")]),t._v(" "),a("h4",{attrs:{id:"问题描述-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#问题描述-3"}},[t._v("#")]),t._v(" 问题描述")]),t._v(" "),a("p",[t._v("一张圆桌上坐着5名哲学家，每两个哲学家之间摆一根筷子，桌子的中间是一碗米饭。哲学家们倾尽毕生精力用于思考和进餐，哲学家在思考时，并不影响他人。只有当哲学家饥饿时，才试图拿起左、右两根筷子（一根一根的拿起）。如果筷子已在他人手上，则需等待。饥饿的哲学家只有同时拿起两根筷子才可以开始进餐，当进餐完毕后，放下筷子继续思考。")]),t._v(" "),a("h4",{attrs:{id:"问题分析-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#问题分析-5"}},[t._v("#")]),t._v(" 问题分析")]),t._v(" "),a("ol",[a("li",[t._v("关系分析。系统中有5个哲学家进程，5位哲学家与左右邻居对其中间筷子的访问是互斥关系。")]),t._v(" "),a("li",[t._v("整理思路。这个问题中只有互斥关系，但与之前遇到的问题不同的是，每个哲学家进程需要同时持有两个临界资源才能开始吃饭。如何避免临界资源分配不当造成的死锁现象，是哲学家问题的精髓。")]),t._v(" "),a("li",[t._v("信号量设置。定义互斥信号量数组chopstick[5] = {1, 2, 3, 4, 5}用于实现对5个筷子的互斥访问。并对哲学家按0-4编号，哲学家 i 左边的筷子编号为 i，右边的筷子编号为(i + 1) % 5。")])]),t._v(" "),a("h4",{attrs:{id:"如何实现-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何实现-5"}},[t._v("#")]),t._v(" 如何实现")]),t._v(" "),a("p",[t._v("如何防止死锁发生呢？")]),t._v(" "),a("p",[t._v("方案一：可以对哲学家进程施加一些限制条件，比如最多允许四个哲学家同时进餐。这样可以保证至少有一个哲学家是可以拿到左右两只筷子的。")]),t._v(" "),a("p",[t._v("方案二：要求奇数号哲学家先拿左边的筷子，然后再拿右边的筷子，而偶数号哲学家刚好相反。用这种方法可以保证如果相邻的两个奇偶号哲学家都想吃饭，那么只会有其中一个可以拿起第一支筷子，另一个会直接阻塞。这就避免了占有一支后再等待另一支的情况。")]),t._v(" "),a("p",[t._v("方案三：仅当一个哲学家左右两支筷子都可以用时才允许他抓起筷子。")]),t._v(" "),a("h4",{attrs:{id:"总结-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结-6"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[t._v("哲学家进餐问题关键在于解决进程死锁。")]),t._v(" "),a("p",[t._v("这些进程之间只存在互斥关系，但是与之前接触到的互斥关系不同的是，每个进程都需要同时持有两个临界资源，因此就有“死锁问题的隐患”。")])])}),[],!1,null,null,null);a.default=v.exports}}]);